trigger:
  branches:
    include:
      - feature/phase_02

variables:
  ACR_NAME: 'tccloudgamesregistry'
  CONTAINER_APP_NAME: 'tc-cloudgames-api-container-app'
  RESOURCE_GROUP: 'tc-cloudgames-rg'
  IMAGE_TAG: '$(Build.SourceVersion)'
  AZURE_CONTAINER_ENV: 'Development'
  DOCKERFILE_PATH: 'src/TC.CloudGames.Api/Dockerfile'
  AZURE_SUBSCRIPTION: 'AzureServiceConnection'

stages:
- stage: BuildAndTest
  displayName: 🧪 Build and Test
  jobs:
    - job: BuildTest
      displayName: Run .NET Build and Tests
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self

        - task: UseDotNet@2
          displayName: Setup .NET 9
          inputs:
            packageType: 'sdk'
            version: '9.0.x'

        - task: Cache@2
          inputs:
            key: 'nuget | "$(Agent.OS)" | **/packages.lock.json'
            restoreKeys: |
              nuget | "$(Agent.OS)"
            path: ~/.nuget/packages
          displayName: 🧠 Cache NuGet packages

        - script: dotnet restore TC.CloudGames.sln
          displayName: 🔄 Restore dependencies

        - script: dotnet build TC.CloudGames.sln --configuration Release --no-restore
          displayName: 🏗️ Build

        - script: dotnet test test/TC.CloudGames.Unit.Tests/TC.CloudGames.Unit.Tests.csproj --no-build --configuration Release
          displayName: 🧪 Run Unit Tests

- stage: Deploy
  displayName: 🚀 Build, Push Image & Deploy
  dependsOn: BuildAndTest
  condition: succeeded()
  jobs:
    - job: BuildPushDeploy
      displayName: 🔧 Build Docker, Push & Deploy
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self

        - task: Docker@2
          displayName: 🐳 Build & Push Docker image
          inputs:
            command: buildAndPush
            containerRegistry: 'ACRServiceConnection'
            repository: $(CONTAINER_APP_NAME)
            dockerfile: $(DOCKERFILE_PATH)
            tags: |
              $(IMAGE_TAG)
              latest

        - task: AzureContainerApps@1
          displayName: 🚀 Deploy to Container App
          inputs:
            azureSubscription: $(AZURE_SUBSCRIPTION)
            resourceGroup: $(RESOURCE_GROUP)
            containerAppName: $(CONTAINER_APP_NAME)
            imageToDeploy: $(ACR_NAME).azurecr.io/$(CONTAINER_APP_NAME):$(IMAGE_TAG)
            environmentVariables: |
              ASPNETCORE_ENVIRONMENT=$(AZURE_CONTAINER_ENV)

        - script: |
            echo "✅ Deployed image: $(ACR_NAME).azurecr.io/$(CONTAINER_APP_NAME):$(IMAGE_TAG)"
          displayName: 📦 Output deployed image tag