name: 🧪 CI | 🚀 CD | Azure Container Apps

on:
  push:
    branches:
      - '**'  # CI runs on commits to any branch
  pull_request:
    branches:
      - master  # CI runs when PR is opened to master
    types: [opened, reopened, synchronize, closed]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Force deployment (only works on master branch)'
        required: false
        default: false
        type: boolean

env:
  # Deployment configuration
  IMAGE_TAG: ${{ github.sha }}
  # Environment-specific configuration
  RESOURCE_GROUP: 'tc-cloudgames-dev-rg'
  KEYVAULT_NAME: 'tccloudgamesdevkv92mr'
  # Build configuration
  DOTNET_VERSION: '9.0.x'
  BUILD_CONFIGURATION: 'Release'
  # Terraform configuration
  TF_VERSION: '1.12.2'
  TF_WORKING_DIR: './infra/terraform/dev'

jobs:
  # JOB 1: CI - Runs on PR opening/commits according to project requirements
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # Run CI for: 
    # - Push/commit to any branch
    # - PR opened/reopened/synchronized to master (but not closed)
    # - Manual workflow dispatch
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'pull_request' && 
       github.event.action != 'closed') ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: 🔄 Restore dependencies
        run: dotnet restore TC.CloudGames.sln

      - name: 🔨 Build solution
        run: dotnet build TC.CloudGames.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

      - name: 🧪 Run unit tests
        run: dotnet test test/TC.CloudGames.Unit.Tests/TC.CloudGames.Unit.Tests.csproj --no-build --verbosity normal --configuration ${{ env.BUILD_CONFIGURATION }} --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.sha }}
          path: ./coverage

  # JOB 2: Terraform - Infrastructure deployment via Terraform Cloud CLI
  terraform-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-and-test]
    # Only run Terraform when merge occurs on master branch (CD requirement)
    if: |
      needs.build-and-test.result == 'success' &&
      ((github.event_name == 'push' && github.ref == 'refs/heads/master') ||
       (github.event_name == 'pull_request' && 
        github.event.action == 'closed' && 
        github.event.pull_request.merged == true &&
        github.base_ref == 'master') ||
       (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master'))
    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false  # Disable wrapper to get proper exit codes

      - name: 🔧 Terraform Init & Upgrade
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          # Terraform Cloud authentication
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
          # Azure authentication for Terraform providers
          ARM_CLIENT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).tenantId }}
          # Terraform Cloud workspace
          TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
        run: |
          echo "🔧 Initializing Terraform..."
          terraform init -upgrade
          
          echo "🔍 Validating Terraform configuration..."
          terraform validate
          
          echo "📋 Terraform workspace info:"
          terraform workspace show
          
          echo "� Workspace is configured for local execution with remote state"
          echo "🔧 This will provide proper exit codes for CI/CD automation"

      - name: 📋 Terraform Plan
        id: terraform-plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          # Terraform Cloud authentication
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
          # Azure authentication for Terraform providers
          ARM_CLIENT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).tenantId }}
          # Terraform Cloud workspace
          TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
        run: |
          echo "📋 Creating Terraform plan..."
          echo "🔧 Using local execution with remote state storage"
          
          set +e  # Don't exit on non-zero exit codes
          
          # Create plan with proper exit code handling for local execution
          terraform plan -detailed-exitcode -no-color -input=false -out=tfplan
          
          # Capture exit code for conditional apply
          PLAN_EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          echo "plan-exit-code=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          echo "🔍 Plan exit code: $PLAN_EXIT_CODE"
          
          if [ $PLAN_EXIT_CODE -eq 1 ]; then
            echo "❌ Terraform plan failed"
            echo "🔍 Check the plan output above for error details"
            exit 1
          elif [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "📝 Terraform plan shows changes to apply"
            echo "🚀 Terraform Apply step will be executed"
            echo "📁 Plan saved to: tfplan"
          elif [ $PLAN_EXIT_CODE -eq 0 ]; then
            echo "✅ Terraform plan shows no changes"
            echo "⏭️ Terraform Apply step will be skipped (no changes needed)"
          else
            echo "⚠️ Unexpected exit code: $PLAN_EXIT_CODE"
            echo "🔍 This might indicate a configuration issue"
          fi

      - name: 🚀 Terraform Apply
        if: steps.terraform-plan.outputs.plan-exit-code == '2'
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          # Terraform Cloud authentication
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
          # Azure authentication for Terraform providers
          ARM_CLIENT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).tenantId }}
          # Terraform Cloud workspace
          TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
        run: |
          echo "🚀 Applying Terraform changes..."
          # Apply the plan file created in the previous step
          if [ -f "tfplan" ]; then
            echo "📁 Applying plan from file: tfplan"
            terraform apply -auto-approve tfplan
          else
            echo "⚠️ Plan file not found, running apply without plan file"
            terraform apply -auto-approve
          fi
          echo "✅ Terraform apply completed successfully"

      - name: 📊 Terraform Outputs
        if: always()
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
          ARM_CLIENT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).tenantId }}
          TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
        run: |
          echo "📊 Terraform Outputs:"
          terraform output -json || echo "No outputs defined"
          
          echo "## 🏗️ Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Terraform Version** | \`${{ env.TF_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Working Directory** | \`${{ env.TF_WORKING_DIR }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Workspace** | \`${{ secrets.TF_WORKSPACE }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Plan Exit Code** | \`${{ steps.terraform-plan.outputs.plan-exit-code }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deploy Time** | \`$(date -u)\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.terraform-plan.outputs.plan-exit-code }}" == "2" ]; then
            echo "✅ **Infrastructure changes applied successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **No infrastructure changes were needed**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Terraform Cloud State**: Managed in workspace \`${{ secrets.TF_WORKSPACE }}\`" >> $GITHUB_STEP_SUMMARY

  # JOB 3: CD - Application deployment (depends on successful Terraform)
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Run after both CI and Terraform complete successfully
    needs: [build-and-test, terraform-deploy]
    # Deploy only when both CI and Terraform succeed, and merge occurs on master branch
    if: |
      always() &&
      needs.build-and-test.result == 'success' &&
      needs.terraform-deploy.result == 'success' &&
      ((github.event_name == 'push' && github.ref == 'refs/heads/master') ||
       (github.event_name == 'pull_request' && 
        github.event.action == 'closed' && 
        github.event.pull_request.merged == true &&
        github.base_ref == 'master') ||
       (github.event_name == 'workflow_dispatch' && 
        github.ref == 'refs/heads/master' && 
        github.event.inputs.deploy == 'true'))
    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.MAIN_AZURE_CREDENTIALS }}

      - name: 🔑 Fetch infrastructure secrets from Azure Key Vault
        id: fetch-infra-secrets
        uses: azure/get-keyvault-secrets@v1
        timeout-minutes: 5
        with:
          keyvault: ${{ env.KEYVAULT_NAME }}
          secrets: acr-name,acr-username,acr-password,container-app-name
        env:
          AZURE_CLIENT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientId }}
          AZURE_TENANT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).tenantId }}
          AZURE_CLIENT_SECRET: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientSecret }}

      - name: 🔑 Fetch database secrets from Azure Key Vault
        id: fetch-db-secrets
        uses: azure/get-keyvault-secrets@v1
        timeout-minutes: 5
        with:
          keyvault: ${{ env.KEYVAULT_NAME }}
          secrets: db-password,db-host,db-port,db-name,db-admin-login
        env:
          AZURE_CLIENT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientId }}
          AZURE_TENANT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).tenantId }}
          AZURE_CLIENT_SECRET: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientSecret }}

      - name: 🔑 Fetch observability secrets from Azure Key Vault
        id: fetch-observability-secrets
        uses: azure/get-keyvault-secrets@v1
        timeout-minutes: 5
        with:
          keyvault: ${{ env.KEYVAULT_NAME }}
          secrets: cache-password,cache-host,cache-port,otel-auth-header,grafana-api-token,grafana-endpoint,grafana-protocol,grafana-resource-attributes
        env:
          AZURE_CLIENT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientId }}
          AZURE_TENANT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).tenantId }}
          AZURE_CLIENT_SECRET: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientSecret }}

      - name: 🔍 Validate required secrets
        env:
          ACR_NAME: ${{ steps.fetch-infra-secrets.outputs['acr-name'] }}
          CONTAINER_APP_NAME: ${{ steps.fetch-infra-secrets.outputs['container-app-name'] }}
          DB_HOST: ${{ steps.fetch-db-secrets.outputs['db-host'] }}
          CACHE_HOST: ${{ steps.fetch-observability-secrets.outputs['cache-host'] }}
        run: |
          echo "🔍 Validating required secrets..."
          
          if [ -z "$ACR_NAME" ]; then
            echo "❌ ACR_NAME is empty or not found in Key Vault"
            exit 1
          fi
          
          if [ -z "$CONTAINER_APP_NAME" ]; then
            echo "❌ CONTAINER_APP_NAME is empty or not found in Key Vault"
            exit 1
          fi
          
          if [ -z "$DB_HOST" ]; then
            echo "❌ DB_HOST is empty or not found in Key Vault"
            exit 1
          fi
          
          if [ -z "$CACHE_HOST" ]; then
            echo "❌ CACHE_HOST is empty or not found in Key Vault"
            exit 1
          fi
          
          echo "✅ All required secrets validated successfully"
          echo "📋 Infrastructure:"
          echo "  - ACR: $ACR_NAME"
          echo "  - Container App: $CONTAINER_APP_NAME"
          echo "  - DB Host: $DB_HOST"
          echo "  - Cache Host: $CACHE_HOST"

      - name: 💾 Upload Key Vault secrets to Azure Container App
        env:
          # Infrastructure configuration
          ACR_NAME: ${{ steps.fetch-infra-secrets.outputs['acr-name'] }}
          CONTAINER_APP_NAME: ${{ steps.fetch-infra-secrets.outputs['container-app-name'] }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
          
          # Application secrets
          DB_PASSWORD: ${{ steps.fetch-db-secrets.outputs['db-password'] }}
          CACHE_PASSWORD: ${{ steps.fetch-observability-secrets.outputs['cache-password'] }}
          OTEL_AUTH_HEADER: ${{ steps.fetch-observability-secrets.outputs['otel-auth-header'] }}
          GRAFANA_API_TOKEN: ${{ steps.fetch-observability-secrets.outputs['grafana-api-token'] }}
        run: |          
          echo "💾 Uploading secrets to Container App..."
          az containerapp secret set \
            --name "$CONTAINER_APP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --secrets db-password-secret="$DB_PASSWORD" cache-password-secret="$CACHE_PASSWORD" otel-auth-header-secret="$OTEL_AUTH_HEADER" grafana-api-token-secret="$GRAFANA_API_TOKEN"
          echo "✅ Secrets uploaded successfully"

      - name: 🐳 Login to ACR
        env:
          ACR_NAME: ${{ steps.fetch-infra-secrets.outputs['acr-name'] }}
          ACR_USERNAME: ${{ steps.fetch-infra-secrets.outputs['acr-username'] }}
          ACR_PASSWORD: ${{ steps.fetch-infra-secrets.outputs['acr-password'] }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: ⚙️ Build and push Docker image
        env:
          ACR_NAME: ${{ steps.fetch-infra-secrets.outputs['acr-name'] }}
          CONTAINER_APP_NAME: ${{ steps.fetch-infra-secrets.outputs['container-app-name'] }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/TC.CloudGames.Api/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_APP_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 🚀 Deploy to Azure Container App
        env:
          # Infrastructure configuration
          ACR_NAME: ${{ steps.fetch-infra-secrets.outputs['acr-name'] }}
          CONTAINER_APP_NAME: ${{ steps.fetch-infra-secrets.outputs['container-app-name'] }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
          
          # Application configuration values
          DB_HOST: ${{ steps.fetch-db-secrets.outputs['db-host'] }}
          DB_PORT: ${{ steps.fetch-db-secrets.outputs['db-port'] }}
          DB_NAME: ${{ steps.fetch-db-secrets.outputs['db-name'] }}
          DB_USER: ${{ steps.fetch-db-secrets.outputs['db-admin-login'] }}
          CACHE_HOST: ${{ steps.fetch-observability-secrets.outputs['cache-host'] }}
          CACHE_PORT: ${{ steps.fetch-observability-secrets.outputs['cache-port'] }}
          GRAFANA_ENDPOINT: ${{ steps.fetch-observability-secrets.outputs['grafana-endpoint'] }}
          GRAFANA_PROTOCOL: ${{ steps.fetch-observability-secrets.outputs['grafana-protocol'] }}
          GRAFANA_RESOURCE_ATTRIBUTES: ${{ steps.fetch-observability-secrets.outputs['grafana-resource-attributes'] }}
        uses: azure/container-apps-deploy-action@v2
        with:
          acrName: ${{ env.ACR_NAME }}
          containerAppName: ${{ env.CONTAINER_APP_NAME }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          imageToDeploy: ${{ env.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_APP_NAME }}:${{ env.IMAGE_TAG }}
          environmentVariables: >-
            ASPNETCORE_ENVIRONMENT=Development
            DB_HOST=${{ env.DB_HOST }}
            DB_PORT=${{ env.DB_PORT }}
            DB_NAME=${{ env.DB_NAME }}
            DB_USER=${{ env.DB_USER }}
            DB_PASSWORD=secretref:db-password-secret
            CACHE_HOST=${{ env.CACHE_HOST }}
            CACHE_PORT=${{ env.CACHE_PORT }}
            CACHE_PASSWORD=secretref:cache-password-secret
            OTEL_EXPORTER_OTLP_ENDPOINT=${{ env.GRAFANA_ENDPOINT }}
            OTEL_EXPORTER_OTLP_PROTOCOL=${{ env.GRAFANA_PROTOCOL }}
            OTEL_EXPORTER_OTLP_HEADERS=secretref:otel-auth-header-secret
            GRAFANA_API_TOKEN=secretref:grafana-api-token-secret
            OTEL_RESOURCE_ATTRIBUTES=${{ env.GRAFANA_RESOURCE_ATTRIBUTES }}

      - name: 🩺 Health check deployed application
        env:
          CONTAINER_APP_NAME: ${{ steps.fetch-infra-secrets.outputs['container-app-name'] }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
        run: |
          echo "🌐 Getting Container App URL..."
          APP_URL=$(az containerapp show \
            --name "$CONTAINER_APP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)
          
          if [ -n "$APP_URL" ] && [ "$APP_URL" != "null" ]; then
            echo "🌐 Container App URL: https://$APP_URL"
            echo "🔄 Waiting for application to be ready..."
            sleep 30
            
            # Perform health check
            if curl -f -s "https://$APP_URL/health" > /dev/null 2>&1; then
              echo "✅ Application health check passed"
            else
              echo "⚠️ Application health check failed, but deployment completed"
              echo "   This might be normal if the health endpoint is not yet configured"
            fi
          else
            echo "⚠️ Could not retrieve Container App URL"
          fi

      - name: 📊 Deployment summary
        env:
          ACR_NAME: ${{ steps.fetch-infra-secrets.outputs['acr-name'] }}
          CONTAINER_APP_NAME: ${{ steps.fetch-infra-secrets.outputs['container-app-name'] }}
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Image Tag** | \`${{ env.IMAGE_TAG }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Container App** | \`$CONTAINER_APP_NAME\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Resource Group** | \`${{ env.RESOURCE_GROUP }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Azure Container Registry** | \`$ACR_NAME\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deploy Time** | \`$(date -u)\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployed Image** | \`$ACR_NAME.azurecr.io/$CONTAINER_APP_NAME:${{ env.IMAGE_TAG }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY