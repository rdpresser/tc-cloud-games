name: 🧪 CI | 🚀 CD | Azure Container Apps

on:
  push:
    branches:
      - '**'  # CI runs on any branch
  pull_request:
    branches:
      - master  # CI runs when PR is opened to master, CD runs when PR is closed/merged
    types: [opened, reopened, synchronize, closed]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Force deployment (only works on master branch)'
        required: false
        default: false
        type: boolean

env:
  # Deployment configuration
  IMAGE_TAG: ${{ github.sha }}
  # Environment-specific configuration
  RESOURCE_GROUP: 'tc-cloudgames-dev-rg'
  KEYVAULT_NAME: 'tccloudgamesdevkv92mr'
  # Build configuration
  DOTNET_VERSION: '9.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  # JOB 1: CI - Runs on all branches for push events and when PRs are opened/updated to master
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # Run CI for: 
    # - Push to any branch (including master after PR merge)
    # - PR opened/reopened/synchronized to master (but not closed)
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'pull_request' && 
       github.event.action != 'closed') ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: 🔄 Restore dependencies
        run: dotnet restore TC.CloudGames.sln

      - name: 🔨 Build solution
        run: dotnet build TC.CloudGames.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

      - name: 🧪 Run unit tests
        run: dotnet test test/TC.CloudGames.Unit.Tests/TC.CloudGames.Unit.Tests.csproj --no-build --verbosity normal --configuration ${{ env.BUILD_CONFIGURATION }} --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.sha }}
          path: ./coverage

  # JOB 2: CD - Runs only when PR to master is closed/merged, push to master, or manual dispatch
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Always run the job if conditions are met, but handle CI dependency logic inside
    if: always()
    needs: [build-and-test]
    steps:
      - name: 🔍 Check deployment conditions
        id: check-conditions
        run: |
          echo "🔍 Checking deployment conditions..."
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Head Ref: ${{ github.head_ref }}"
          echo "Base Ref: ${{ github.base_ref }}"
          echo "Repository: ${{ github.repository }}"
          
          # IMPORTANT: Only deploy from master branch workflows, never from feature branch workflows
          # This prevents duplicate runs when PR is merged (feature branch + master branch workflows)
          
          # Check if this is a push to master (direct push or merge result)
          if [[ "${{ github.event_name }}" == "push" && 
                "${{ github.ref }}" == "refs/heads/master" && 
                "${{ needs.build-and-test.result }}" == "success" ]]; then
            echo "condition=deploy" >> $GITHUB_OUTPUT
            echo "✅ Deployment triggered by push to master branch (CI passed)"
            
          # Check if this is manual workflow dispatch on master
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && 
                  "${{ github.ref }}" == "refs/heads/master" && 
                  "${{ github.event.inputs.deploy }}" == "true" && 
                  "${{ needs.build-and-test.result }}" == "success" ]]; then
            echo "condition=deploy" >> $GITHUB_OUTPUT
            echo "✅ Deployment triggered by manual dispatch on master (CI passed)"
            
          else
            echo "condition=skip" >> $GITHUB_OUTPUT
            echo "❌ Deployment conditions not met"
            echo "   Deployment only runs for:"
            echo "   - Push events to master branch (with successful CI)"
            echo "   - Manual workflow dispatch on master branch (with successful CI)"
            echo "   - NOT for pull_request events (even when merged)"
            echo ""
            echo "Current state:"
            echo "   Event: ${{ github.event_name }}"
            echo "   Ref: ${{ github.ref }}"
            echo "   CI Result: ${{ needs.build-and-test.result }}"
          fi

      - name: ⏬ Checkout repository
        if: steps.check-conditions.outputs.condition == 'deploy'
        uses: actions/checkout@v4

      - name: 🔐 Login to Azure
        if: steps.check-conditions.outputs.condition == 'deploy'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.MAIN_AZURE_CREDENTIALS }}

      - name: 🔑 Fetch infrastructure secrets from Azure Key Vault
        if: steps.check-conditions.outputs.condition == 'deploy'
        id: fetch-infra-secrets
        uses: azure/get-keyvault-secrets@v1
        timeout-minutes: 5
        with:
          keyvault: ${{ env.KEYVAULT_NAME }}
          secrets: acr-name,acr-username,acr-password,container-app-name
        env:
          AZURE_CLIENT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientId }}
          AZURE_TENANT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).tenantId }}
          AZURE_CLIENT_SECRET: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientSecret }}

      - name: 🔑 Fetch database secrets from Azure Key Vault
        if: steps.check-conditions.outputs.condition == 'deploy'
        id: fetch-db-secrets
        uses: azure/get-keyvault-secrets@v1
        timeout-minutes: 5
        with:
          keyvault: ${{ env.KEYVAULT_NAME }}
          secrets: db-password,db-host,db-port,db-name,db-admin-login
        env:
          AZURE_CLIENT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientId }}
          AZURE_TENANT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).tenantId }}
          AZURE_CLIENT_SECRET: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientSecret }}

      - name: 🔑 Fetch observability secrets from Azure Key Vault
        if: steps.check-conditions.outputs.condition == 'deploy'
        id: fetch-observability-secrets
        uses: azure/get-keyvault-secrets@v1
        timeout-minutes: 5
        with:
          keyvault: ${{ env.KEYVAULT_NAME }}
          secrets: cache-password,cache-host,cache-port,otel-auth-header,grafana-api-token,grafana-endpoint,grafana-protocol,grafana-resource-attributes
        env:
          AZURE_CLIENT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientId }}
          AZURE_TENANT_ID: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).tenantId }}
          AZURE_CLIENT_SECRET: ${{ fromJson(secrets.MAIN_AZURE_CREDENTIALS).clientSecret }}

      - name: 🔍 Validate required secrets
        if: steps.check-conditions.outputs.condition == 'deploy'
        env:
          ACR_NAME: ${{ steps.fetch-infra-secrets.outputs['acr-name'] }}
          CONTAINER_APP_NAME: ${{ steps.fetch-infra-secrets.outputs['container-app-name'] }}
          DB_HOST: ${{ steps.fetch-db-secrets.outputs['db-host'] }}
          CACHE_HOST: ${{ steps.fetch-observability-secrets.outputs['cache-host'] }}
        run: |
          echo "🔍 Validating required secrets..."
          
          if [ -z "$ACR_NAME" ]; then
            echo "❌ ACR_NAME is empty or not found in Key Vault"
            exit 1
          fi
          
          if [ -z "$CONTAINER_APP_NAME" ]; then
            echo "❌ CONTAINER_APP_NAME is empty or not found in Key Vault"
            exit 1
          fi
          
          if [ -z "$DB_HOST" ]; then
            echo "❌ DB_HOST is empty or not found in Key Vault"
            exit 1
          fi
          
          if [ -z "$CACHE_HOST" ]; then
            echo "❌ CACHE_HOST is empty or not found in Key Vault"
            exit 1
          fi
          
          echo "✅ All required secrets validated successfully"
          echo "📋 Infrastructure:"
          echo "  - ACR: $ACR_NAME"
          echo "  - Container App: $CONTAINER_APP_NAME"
          echo "  - DB Host: $DB_HOST"
          echo "  - Cache Host: $CACHE_HOST"

      - name: 💾 Upload Key Vault secrets to Azure Container App
        if: steps.check-conditions.outputs.condition == 'deploy'
        env:
          # Infrastructure configuration
          ACR_NAME: ${{ steps.fetch-infra-secrets.outputs['acr-name'] }}
          CONTAINER_APP_NAME: ${{ steps.fetch-infra-secrets.outputs['container-app-name'] }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
          
          # Application secrets
          DB_PASSWORD: ${{ steps.fetch-db-secrets.outputs['db-password'] }}
          CACHE_PASSWORD: ${{ steps.fetch-observability-secrets.outputs['cache-password'] }}
          OTEL_AUTH_HEADER: ${{ steps.fetch-observability-secrets.outputs['otel-auth-header'] }}
          GRAFANA_API_TOKEN: ${{ steps.fetch-observability-secrets.outputs['grafana-api-token'] }}
        run: |          
          echo "💾 Uploading secrets to Container App..."
          az containerapp secret set \
            --name "$CONTAINER_APP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --secrets db-password-secret="$DB_PASSWORD" cache-password-secret="$CACHE_PASSWORD" otel-auth-header-secret="$OTEL_AUTH_HEADER" grafana-api-token-secret="$GRAFANA_API_TOKEN"
          echo "✅ Secrets uploaded successfully"

      - name: 🐳 Login to ACR
        if: steps.check-conditions.outputs.condition == 'deploy'
        env:
          ACR_NAME: ${{ steps.fetch-infra-secrets.outputs['acr-name'] }}
          ACR_USERNAME: ${{ steps.fetch-infra-secrets.outputs['acr-username'] }}
          ACR_PASSWORD: ${{ steps.fetch-infra-secrets.outputs['acr-password'] }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: ⚙️ Set up Docker Buildx
        if: steps.check-conditions.outputs.condition == 'deploy'
        uses: docker/setup-buildx-action@v3

      - name: ⚙️ Build and push Docker image
        if: steps.check-conditions.outputs.condition == 'deploy'
        env:
          ACR_NAME: ${{ steps.fetch-infra-secrets.outputs['acr-name'] }}
          CONTAINER_APP_NAME: ${{ steps.fetch-infra-secrets.outputs['container-app-name'] }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/TC.CloudGames.Api/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_APP_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 🚀 Deploy to Azure Container App
        if: steps.check-conditions.outputs.condition == 'deploy'
        env:
          # Infrastructure configuration
          ACR_NAME: ${{ steps.fetch-infra-secrets.outputs['acr-name'] }}
          CONTAINER_APP_NAME: ${{ steps.fetch-infra-secrets.outputs['container-app-name'] }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
          
          # Application configuration values
          DB_HOST: ${{ steps.fetch-db-secrets.outputs['db-host'] }}
          DB_PORT: ${{ steps.fetch-db-secrets.outputs['db-port'] }}
          DB_NAME: ${{ steps.fetch-db-secrets.outputs['db-name'] }}
          DB_USER: ${{ steps.fetch-db-secrets.outputs['db-admin-login'] }}
          CACHE_HOST: ${{ steps.fetch-observability-secrets.outputs['cache-host'] }}
          CACHE_PORT: ${{ steps.fetch-observability-secrets.outputs['cache-port'] }}
          GRAFANA_ENDPOINT: ${{ steps.fetch-observability-secrets.outputs['grafana-endpoint'] }}
          GRAFANA_PROTOCOL: ${{ steps.fetch-observability-secrets.outputs['grafana-protocol'] }}
          GRAFANA_RESOURCE_ATTRIBUTES: ${{ steps.fetch-observability-secrets.outputs['grafana-resource-attributes'] }}
        uses: azure/container-apps-deploy-action@v2
        with:
          acrName: ${{ env.ACR_NAME }}
          containerAppName: ${{ env.CONTAINER_APP_NAME }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          imageToDeploy: ${{ env.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_APP_NAME }}:${{ env.IMAGE_TAG }}
          environmentVariables: >-
            ASPNETCORE_ENVIRONMENT=Development
            DB_HOST=${{ env.DB_HOST }}
            DB_PORT=${{ env.DB_PORT }}
            DB_NAME=${{ env.DB_NAME }}
            DB_USER=${{ env.DB_USER }}
            DB_PASSWORD=secretref:db-password-secret
            CACHE_HOST=${{ env.CACHE_HOST }}
            CACHE_PORT=${{ env.CACHE_PORT }}
            CACHE_PASSWORD=secretref:cache-password-secret
            OTEL_EXPORTER_OTLP_ENDPOINT=${{ env.GRAFANA_ENDPOINT }}
            OTEL_EXPORTER_OTLP_PROTOCOL=${{ env.GRAFANA_PROTOCOL }}
            OTEL_EXPORTER_OTLP_HEADERS=secretref:otel-auth-header-secret
            GRAFANA_API_TOKEN=secretref:grafana-api-token-secret
            OTEL_RESOURCE_ATTRIBUTES=${{ env.GRAFANA_RESOURCE_ATTRIBUTES }}

      - name: 🩺 Health check deployed application
        if: steps.check-conditions.outputs.condition == 'deploy'
        env:
          CONTAINER_APP_NAME: ${{ steps.fetch-infra-secrets.outputs['container-app-name'] }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
        run: |
          echo "🌐 Getting Container App URL..."
          APP_URL=$(az containerapp show \
            --name "$CONTAINER_APP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)
          
          if [ -n "$APP_URL" ] && [ "$APP_URL" != "null" ]; then
            echo "🌐 Container App URL: https://$APP_URL"
            echo "🔄 Waiting for application to be ready..."
            sleep 30
            
            # Perform health check
            if curl -f -s "https://$APP_URL/health" > /dev/null 2>&1; then
              echo "✅ Application health check passed"
            else
              echo "⚠️ Application health check failed, but deployment completed"
              echo "   This might be normal if the health endpoint is not yet configured"
            fi
          else
            echo "⚠️ Could not retrieve Container App URL"
          fi

      - name: 📊 Deployment summary
        if: steps.check-conditions.outputs.condition == 'deploy'
        env:
          ACR_NAME: ${{ steps.fetch-infra-secrets.outputs['acr-name'] }}
          CONTAINER_APP_NAME: ${{ steps.fetch-infra-secrets.outputs['container-app-name'] }}
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Image Tag** | \`${{ env.IMAGE_TAG }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Container App** | \`$CONTAINER_APP_NAME\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Resource Group** | \`${{ env.RESOURCE_GROUP }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Azure Container Registry** | \`$ACR_NAME\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deploy Time** | \`$(date -u)\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployed Image** | \`$ACR_NAME.azurecr.io/$CONTAINER_APP_NAME:${{ env.IMAGE_TAG }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY