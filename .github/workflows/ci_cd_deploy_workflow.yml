name: 🧪 CI | 🚀 CD | Azure Container Apps

on:
  push:
    branches:
      - '**'  # CI runs on commits to any branch
  pull_request:
    branches:
      - master  # CI runs when PR is opened to master
    types: [opened, reopened, synchronize, closed]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy'
        required: true
        default: 'dev-rodrigo'
        type: choice
        options:
          - dev-rodrigo
          - dev-ricardo
      deploy:
        description: 'Force deployment (only works on master branch)'
        required: false
        default: false
        type: boolean

env:
  # Deployment configuration
  IMAGE_TAG: ${{ github.sha }}
  # Environment-specific configuration
  RESOURCE_GROUP: 'tc-cloudgames-dev-rg'
  KEYVAULT_NAME: tccloudgamesdevkv${{ vars.AZURE_SUFFIX }}
  # Build configuration
  DOTNET_VERSION: '9.0.x'
  BUILD_CONFIGURATION: 'Release'
  # Terraform configuration
  TF_VERSION: '1.12.2'
  TF_WORKING_DIR: './infra/terraform/dev'
  TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
  TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }}

jobs:
  # JOB 1: CI - Runs on PR opening/commits according to project requirements
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # Run CI for: 
    # - Push/commit to any branch
    # - PR opened/reopened/synchronized to master (but not closed)
    # - Manual workflow dispatch
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'pull_request' && 
       github.event.action != 'closed') ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: 🔄 Restore dependencies
        run: dotnet restore TC.CloudGames.sln

      - name: 🔨 Build solution
        run: dotnet build TC.CloudGames.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

      - name: 🧪 Run unit tests
        run: |
          dotnet test test/TC.CloudGames.Unit.Tests/TC.CloudGames.Unit.Tests.csproj \
            --no-build \
            --verbosity normal \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            --logger trx

      - name: 🔒 Security NuGet Vulnerability Scan
        run: dotnet list package --vulnerable --include-transitive || true

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.sha }}
          path: |
            ./coverage
            **/*.trx

  # JOB 2: Terraform - Infrastructure deployment via Terraform Cloud (Remote Execution)
  terraform-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [build-and-test]
    environment: ${{ github.event.inputs.environment || 'dev-rodrigo' }}
    outputs:
      environment-approved: ${{ steps.approval-check.outputs.approved }}
      selected-environment: ${{ github.event.inputs.environment || 'dev-rodrigo' }}
      azure-credentials: ${{ steps.get-credentials.outputs.azure-creds }}
    # Only run Terraform when merge occurs on master branch (CD requirement)
    if: |
      needs.build-and-test.result == 'success' &&
      ((github.event_name == 'push' && github.ref == 'refs/heads/master') ||
       (github.event_name == 'pull_request' && 
        github.event.action == 'closed' && 
        github.event.pull_request.merged == true &&
        github.base_ref == 'master') ||
       (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master'))
    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4

      - name: ✅ Mark Environment Approved
        id: approval-check
        run: |
          echo "approved=true" >> $GITHUB_OUTPUT
          echo "✅ Environment ${{ github.event.inputs.environment || 'dev-rodrigo' }} approved for deployment"

      - name: 🔍 Validate Configuration
        run: |
          echo "🔍 Validating deployment configuration..."
          echo "Selected Environment: '${{ github.event.inputs.environment || 'dev-rodrigo' }}'"
          echo "Terraform Workspace: Configured ✅"
          echo "Terraform Organization: Configured ✅"
          echo "Azure Suffix: Configured ✅"
          echo "Key Vault Name: Computed ✅"
          echo "✅ All configuration variables are properly set"

      - name: 🔐 Get Azure Credentials
        id: get-credentials
        run: |
          # Store credentials in job output (more secure than environment variables)
          # The actual credential value is not logged, only a success message
          echo "azure-creds<<EOF" >> $GITHUB_OUTPUT
          echo "${{ secrets.AZURE_CREDENTIALS }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "✅ Azure credentials prepared for downstream jobs"

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: 🔧 Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "🔧 Initializing Terraform with remote execution..."
          terraform init -upgrade
          
          echo "🔍 Validating Terraform configuration..."
          terraform validate
          
          echo "📋 Terraform workspace info:"
          terraform workspace show
          
          echo "🔧 Workspace is configured for remote execution with auto-apply"
          echo "🔧 All variables are managed in Terraform Cloud workspace"
          echo "🔗 View progress: https://app.terraform.io/app/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ env.TF_WORKSPACE }}"

      - name: 🚀 Terraform Apply (Remote Execution)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "🚀 Triggering remote infrastructure deployment..."
          echo "📋 Plan and apply will execute in Terraform Cloud with auto-apply enabled"
          echo "🔗 Monitor progress: https://app.terraform.io/app/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ env.TF_WORKSPACE }}"
          
          # Trigger remote apply with auto-approval
          terraform apply -auto-approve
          
          echo "✅ Infrastructure deployment completed successfully"

      - name: 📊 Terraform Outputs
        if: always()
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "📊 Infrastructure outputs:"
          terraform output -json || echo "No outputs available"
          
          # Enhanced deployment summary with clickable links
          WORKSPACE_URL="https://app.terraform.io/app/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ env.TF_WORKSPACE }}"
          
          echo "## 🏗️ Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Execution Mode** | Remote (Terraform Cloud) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Workspace** | [\`${{ env.TF_WORKSPACE }}\`]($WORKSPACE_URL) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Terraform Version** | \`${{ env.TF_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deploy Time** | \`$(date -u)\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Infrastructure deployment completed!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **[View Terraform Cloud Workspace]($WORKSPACE_URL)**" >> $GITHUB_STEP_SUMMARY

  # JOB 3: Database Health Check - Ensure database is running before deployment
  database-health-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [terraform-deploy]
    # Run after Terraform completes successfully and before application deployment
    # Note: Inherits credentials from terraform-deploy job - no additional approval required
    if: |
      needs.terraform-deploy.result == 'success' &&
      needs.terraform-deploy.outputs.environment-approved == 'true' &&
      ((github.event_name == 'push' && github.ref == 'refs/heads/master') ||
       (github.event_name == 'pull_request' && 
        github.event.action == 'closed' && 
        github.event.pull_request.merged == true &&
        github.base_ref == 'master') ||
       (github.event_name == 'workflow_dispatch' && 
        github.ref == 'refs/heads/master'))
    steps:
      - name: 🔐 Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ needs.terraform-deploy.outputs.azure-credentials }}

      - name: 🗄️ Check and Start PostgreSQL Database
        env:
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
        run: |
          echo "🔍 Checking PostgreSQL database status..."
          
          # Get the actual server name (it includes a random suffix)
          SERVER_NAME=$(az postgres flexible-server list \
            --resource-group "$RESOURCE_GROUP" \
            --query "[?contains(name, 'tc-cloudgames-dev-db')].name" \
            --output tsv)
          
          if [ -z "$SERVER_NAME" ]; then
            echo "❌ PostgreSQL server not found in resource group: $RESOURCE_GROUP"
            echo "🔧 This is expected if this is the first deployment"
            echo "⏳ Terraform should have created the server, waiting for propagation..."
            sleep 30
            
            # Try again after waiting
            SERVER_NAME=$(az postgres flexible-server list \
              --resource-group "$RESOURCE_GROUP" \
              --query "[?contains(name, 'tc-cloudgames-dev-db')].name" \
              --output tsv)
          fi
          
          if [ -n "$SERVER_NAME" ]; then
            echo "✅ Found PostgreSQL server: $SERVER_NAME"
            
            # Check current status
            CURRENT_STATUS=$(az postgres flexible-server show \
              --name "$SERVER_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --query "state" \
              --output tsv)
            
            echo "📊 Current database status: $CURRENT_STATUS"
            
            case "$CURRENT_STATUS" in
              "Ready")
                echo "✅ Database is already running and ready for connections"
                echo "DB_STATUS=ready" >> $GITHUB_ENV
                ;;
              "Stopped")
                echo "🚀 Database is stopped, starting it now..."
                az postgres flexible-server start \
                  --name "$SERVER_NAME" \
                  --resource-group "$RESOURCE_GROUP"
                
                echo "⏳ Waiting for database to become ready..."
                for i in {1..20}; do
                  sleep 15
                  DB_STATUS=$(az postgres flexible-server show \
                    --name "$SERVER_NAME" \
                    --resource-group "$RESOURCE_GROUP" \
                    --query "state" \
                    --output tsv)
                  
                  echo "Status check ($i/20): $DB_STATUS"
                  
                  if [ "$DB_STATUS" == "Ready" ]; then
                    echo "✅ Database started successfully and is ready!"
                    echo "DB_STATUS=started" >> $GITHUB_ENV
                    break
                  fi
                  
                  if [ $i -eq 20 ]; then
                    echo "⚠️ Database taking longer than expected to start"
                    echo "Current status: $DB_STATUS"
                    echo "DB_STATUS=timeout" >> $GITHUB_ENV
                  fi
                done
                ;;
              "Starting")
                echo "⏳ Database is already starting, waiting for it to become ready..."
                for i in {1..15}; do
                  sleep 20
                  DB_STATUS=$(az postgres flexible-server show \
                    --name "$SERVER_NAME" \
                    --resource-group "$RESOURCE_GROUP" \
                    --query "state" \
                    --output tsv)
                  
                  echo "Status check ($i/15): $DB_STATUS"
                  
                  if [ "$DB_STATUS" == "Ready" ]; then
                    echo "✅ Database is now ready!"
                    echo "DB_STATUS=ready" >> $GITHUB_ENV
                    break
                  fi
                done
                ;;
              *)
                echo "⚠️ Database is in unexpected state: $CURRENT_STATUS"
                echo "🔧 Proceeding with deployment, but monitor database connectivity"
                echo "DB_STATUS=unknown" >> $GITHUB_ENV
                ;;
            esac
            
            # Final status check
            FINAL_STATUS=$(az postgres flexible-server show \
              --name "$SERVER_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --query "state" \
              --output tsv)
            
            echo "🏁 Final database status: $FINAL_STATUS"
            echo "SERVER_NAME=$SERVER_NAME" >> $GITHUB_ENV
            
          else
            echo "⚠️ PostgreSQL server not found after waiting"
            echo "🔧 This might be a new deployment - proceeding cautiously"
            echo "DB_STATUS=not_found" >> $GITHUB_ENV
          fi

      - name: 📊 Database Health Summary
        run: |
          echo "## 🗄️ Database Health Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Resource Group** | \`${{ env.RESOURCE_GROUP }}\` |" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "$SERVER_NAME" ]; then
            echo "| **Server Name** | \`$SERVER_NAME\` |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "| **Check Time** | \`$(date -u)\` |" >> $GITHUB_STEP_SUMMARY
          
          case "$DB_STATUS" in
            "ready")
              echo "| **Status** | ✅ Already Running |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "✅ **Database is ready for application deployment!**" >> $GITHUB_STEP_SUMMARY
              ;;
            "started")
              echo "| **Status** | 🚀 Started Successfully |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "✅ **Database started and ready for application deployment!**" >> $GITHUB_STEP_SUMMARY
              ;;
            "timeout")
              echo "| **Status** | ⏳ Start Timeout |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "⚠️ **Database start took longer than expected - monitor connectivity**" >> $GITHUB_STEP_SUMMARY
              ;;
            "not_found")
              echo "| **Status** | 🔧 Not Found (New Deployment) |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🔧 **Database not found - this might be a new deployment**" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "| **Status** | ❓ Unknown State |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "⚠️ **Database in unexpected state - proceed with caution**" >> $GITHUB_STEP_SUMMARY
              ;;
          esac

  # JOB 4: CD - Application deployment (depends on successful Terraform and Database Health)
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Run after both Terraform and Database Health Check complete successfully
    needs: [build-and-test, terraform-deploy, database-health-check]
    # Note: Inherits credentials from terraform-deploy job - no additional approval required
    # Deploy only when all previous jobs succeed, and merge occurs on master branch
    if: |
      always() &&
      needs.build-and-test.result == 'success' &&
      needs.terraform-deploy.result == 'success' &&
      needs.terraform-deploy.outputs.environment-approved == 'true' &&
      needs.database-health-check.result == 'success' &&
      ((github.event_name == 'push' && github.ref == 'refs/heads/master') ||
       (github.event_name == 'pull_request' && 
        github.event.action == 'closed' && 
        github.event.pull_request.merged == true &&
        github.base_ref == 'master') ||
       (github.event_name == 'workflow_dispatch' && 
        github.ref == 'refs/heads/master' && 
        github.event.inputs.deploy == 'true'))
    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ needs.terraform-deploy.outputs.azure-credentials }}

      - name: 🔑 Fetch all secrets from Azure Key Vault
        id: fetch-secrets
        uses: azure/get-keyvault-secrets@v1
        timeout-minutes: 5
        with:
          keyvault: ${{ env.KEYVAULT_NAME }}
          secrets: |
            acr-name,acr-username,acr-password,container-app-name,
            db-password,db-host,db-port,db-name,db-admin-login,
            cache-password,cache-host,cache-port,
            otel-auth-header,grafana-api-token,grafana-endpoint,
            grafana-protocol,grafana-resource-attributes,grafana-prometheus-api-token
        env:
          AZURE_CLIENT_ID: ${{ fromJson(needs.terraform-deploy.outputs.azure-credentials).clientId }}
          AZURE_TENANT_ID: ${{ fromJson(needs.terraform-deploy.outputs.azure-credentials).tenantId }}
          AZURE_CLIENT_SECRET: ${{ fromJson(needs.terraform-deploy.outputs.azure-credentials).clientSecret }}

      - name: 🔍 Validate critical secrets
        env:
          ACR_NAME: ${{ steps.fetch-secrets.outputs['acr-name'] }}
          CONTAINER_APP_NAME: ${{ steps.fetch-secrets.outputs['container-app-name'] }}
          DB_HOST: ${{ steps.fetch-secrets.outputs['db-host'] }}
          CACHE_HOST: ${{ steps.fetch-secrets.outputs['cache-host'] }}
        run: |
          echo "🔍 Validating critical secrets..."
          
          MISSING_SECRETS=()
          
          [ -z "$ACR_NAME" ] && MISSING_SECRETS+=("acr-name")
          [ -z "$CONTAINER_APP_NAME" ] && MISSING_SECRETS+=("container-app-name")
          [ -z "$DB_HOST" ] && MISSING_SECRETS+=("db-host")
          [ -z "$CACHE_HOST" ] && MISSING_SECRETS+=("cache-host")
          
          if [ ${#MISSING_SECRETS[@]} -ne 0 ]; then
            echo "❌ Missing critical secrets: ${MISSING_SECRETS[*]}"
            exit 1
          fi
          
          echo "✅ All critical secrets validated"
          echo "📋 Infrastructure verified: ACR=$ACR_NAME, App=$CONTAINER_APP_NAME"

      - name: 💾 Update Container App secrets
        env:
          CONTAINER_APP_NAME: ${{ steps.fetch-secrets.outputs['container-app-name'] }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
          DB_PASSWORD: ${{ steps.fetch-secrets.outputs['db-password'] }}
          CACHE_PASSWORD: ${{ steps.fetch-secrets.outputs['cache-password'] }}
          OTEL_AUTH_HEADER: ${{ steps.fetch-secrets.outputs['otel-auth-header'] }}
          GRAFANA_API_TOKEN: ${{ steps.fetch-secrets.outputs['grafana-api-token'] }}
          GRAFANA_PROMETHEUS_TOKEN: ${{ steps.fetch-secrets.outputs['grafana-prometheus-api-token'] }}
        run: |
          echo "💾 Updating Container App secrets..."
          az containerapp secret set \
            --name "$CONTAINER_APP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --secrets \
              db-password-secret="$DB_PASSWORD" \
              cache-password-secret="$CACHE_PASSWORD" \
              otel-auth-header-secret="$OTEL_AUTH_HEADER" \
              grafana-api-token-secret="$GRAFANA_API_TOKEN" \
              grafana-prometheus-api-token-secret="$GRAFANA_PROMETHEUS_TOKEN"
          echo "✅ Secrets updated successfully"

      - name: 🐳 Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.fetch-secrets.outputs['acr-name'] }}.azurecr.io
          username: ${{ steps.fetch-secrets.outputs['acr-username'] }}
          password: ${{ steps.fetch-secrets.outputs['acr-password'] }}

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: ⚙️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/TC.CloudGames.Api/Dockerfile
          push: true
          tags: ${{ steps.fetch-secrets.outputs['acr-name'] }}.azurecr.io/${{ steps.fetch-secrets.outputs['container-app-name'] }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: 🚀 Deploy to Azure Container App
        uses: azure/container-apps-deploy-action@v2
        with:
          acrName: ${{ steps.fetch-secrets.outputs['acr-name'] }}
          containerAppName: ${{ steps.fetch-secrets.outputs['container-app-name'] }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          imageToDeploy: ${{ steps.fetch-secrets.outputs['acr-name'] }}.azurecr.io/${{ steps.fetch-secrets.outputs['container-app-name'] }}:${{ env.IMAGE_TAG }}
          environmentVariables: >-
            ASPNETCORE_ENVIRONMENT=Development
            DB_HOST=${{ steps.fetch-secrets.outputs['db-host'] }}
            DB_PORT=${{ steps.fetch-secrets.outputs['db-port'] }}
            DB_NAME=${{ steps.fetch-secrets.outputs['db-name'] }}
            DB_USER=${{ steps.fetch-secrets.outputs['db-admin-login'] }}
            DB_PASSWORD=secretref:db-password-secret
            CACHE_HOST=${{ steps.fetch-secrets.outputs['cache-host'] }}
            CACHE_PORT=${{ steps.fetch-secrets.outputs['cache-port'] }}
            CACHE_PASSWORD=secretref:cache-password-secret
            OTEL_EXPORTER_OTLP_ENDPOINT=${{ steps.fetch-secrets.outputs['grafana-endpoint'] }}
            OTEL_EXPORTER_OTLP_PROTOCOL=${{ steps.fetch-secrets.outputs['grafana-protocol'] }}
            OTEL_EXPORTER_OTLP_HEADERS=secretref:otel-auth-header-secret
            GRAFANA_API_TOKEN=secretref:grafana-api-token-secret
            GRAFANA_PROMETHEUS_TOKEN=secretref:grafana-prometheus-api-token-secret
            OTEL_RESOURCE_ATTRIBUTES=${{ steps.fetch-secrets.outputs['grafana-resource-attributes'] }}

      - name: 🩺 Enhanced health check with retries
        env:
          CONTAINER_APP_NAME: ${{ steps.fetch-secrets.outputs['container-app-name'] }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
        run: |
          echo "🌐 Getting Container App URL..."
          APP_URL=$(az containerapp show \
            --name "$CONTAINER_APP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)
          
          if [ -n "$APP_URL" ] && [ "$APP_URL" != "null" ]; then
            echo "🌐 Application URL: https://$APP_URL"
            echo "APP_URL=https://$APP_URL" >> $GITHUB_ENV
            
            echo "🔄 Waiting for application startup..."
            sleep 45
            
            # Enhanced health check with retries
            HEALTH_CHECK_PASSED=false
            for i in {1..5}; do
              echo "🔍 Health check attempt $i/5..."
              if curl -f -s -m 10 "https://$APP_URL/health" > /dev/null 2>&1; then
                echo "✅ Health check passed on attempt $i"
                HEALTH_CHECK_PASSED=true
                break
              fi
              [ $i -lt 5 ] && sleep 15
            done
            
            if [ "$HEALTH_CHECK_PASSED" = false ]; then
              echo "⚠️ Health check failed after 5 attempts"
              echo "📋 This might be normal if health endpoint is not configured"
            fi
          else
            echo "⚠️ Could not retrieve Container App URL"
          fi

      - name: 📊 Enhanced deployment summary
        env:
          ACR_NAME: ${{ steps.fetch-secrets.outputs['acr-name'] }}
          CONTAINER_APP_NAME: ${{ steps.fetch-secrets.outputs['container-app-name'] }}
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **🎯 Environment** | Development |" >> $GITHUB_STEP_SUMMARY
          echo "| **📦 Image Tag** | [\`${{ env.IMAGE_TAG }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| **🐳 Container App** | \`$CONTAINER_APP_NAME\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **📁 Resource Group** | \`${{ env.RESOURCE_GROUP }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **🏭 Registry** | \`$ACR_NAME\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **⏰ Deploy Time** | \`$(date -u)\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **📋 Deployed Image** | \`$ACR_NAME.azurecr.io/$CONTAINER_APP_NAME:${{ env.IMAGE_TAG }}\` |" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "$APP_URL" ]; then
            echo "| **🌐 Application URL** | [$APP_URL]($APP_URL) |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 [Azure Portal](https://portal.azure.com/#@/resource/subscriptions/${{ fromJson(needs.terraform-deploy.outputs.azure-credentials).subscriptionId }}/resourceGroups/${{ env.RESOURCE_GROUP }}/overview)" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "$APP_URL" ]; then
            echo "- 🌐 [Live Application]($APP_URL)" >> $GITHUB_STEP_SUMMARY
          fi
