name: üèóÔ∏è IaC Management | Stop/Start Resources

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to manage'
        required: true
        default: 'dev-rodrigo'
        type: choice
        options:
          - dev-rodrigo
          - dev-ricardo
      action:
        description: 'Infrastructure Action'
        required: true
        type: choice
        options:
          - stop-all
          - start-all
          - stop-database
          - start-database
          - stop-container-app
          - start-container-app
          - destroy-redis
          - recreate-redis
          - destroy-acr
          - recreate-acr
          - destroy-storage-resources
          - recreate-storage-resources
        default: 'stop-all'
      confirm_destructive:
        description: 'Confirm destructive actions (destroy/recreate operations)'
        required: false
        type: boolean
        default: false

env:
  # Environment-specific configuration
  RESOURCE_GROUP: 'tc-cloudgames-dev-rg'
  # Terraform configuration
  TF_WORKSPACE: ${{ vars.TF_WORKSPACE_AZURE_DEV }}
  TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }}

jobs:
  # Job 1: Azure CLI Resource Operations (Start/Stop)
  azure-resources:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: ${{ github.event.inputs.environment }}
    if: contains(fromJSON('["stop-all", "start-all", "stop-database", "start-database", "stop-container-app", "start-container-app"]'), github.event.inputs.action)
    steps:
      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üóÑÔ∏è Manage Database Server
        if: contains(fromJSON('["stop-all", "start-all", "stop-database", "start-database"]'), github.event.inputs.action)
        run: |
          ACTION="${{ github.event.inputs.action }}"
          OPERATION=$(echo "$ACTION" | grep -q "stop" && echo "stop" || echo "start")
          
          echo "üóÑÔ∏è ${OPERATION^}ping PostgreSQL Flexible Server..."
          
          # Find database server
          SERVER_NAME=$(az postgres flexible-server list --resource-group "$RESOURCE_GROUP" \
            --query "[?contains(name, 'tc-cloudgames-dev-db')].name" --output tsv 2>/dev/null)
          
          if [ -z "$SERVER_NAME" ]; then
            echo "‚ÑπÔ∏è No PostgreSQL server found - skipping database operation"
            exit 0
          fi
          
          # Get current status
          CURRENT_STATUS=$(az postgres flexible-server show --name "$SERVER_NAME" --resource-group "$RESOURCE_GROUP" \
            --query "state" --output tsv 2>/dev/null)
          
          echo "üìä Server: $SERVER_NAME | Status: $CURRENT_STATUS"
          
          # Perform operation
          if [[ "$OPERATION" == "stop" && "$CURRENT_STATUS" == "Ready" ]]; then
            az postgres flexible-server stop --name "$SERVER_NAME" --resource-group "$RESOURCE_GROUP" 2>/dev/null
            echo "‚úÖ Database server stopped"
          elif [[ "$OPERATION" == "start" && "$CURRENT_STATUS" == "Stopped" ]]; then
            az postgres flexible-server start --name "$SERVER_NAME" --resource-group "$RESOURCE_GROUP" 2>/dev/null
            echo "‚úÖ Database server started"
          else
            echo "‚ÑπÔ∏è Database already in desired state or transitioning"
          fi

      - name: üì¶ Manage Container App
        if: contains(fromJSON('["stop-all", "start-all", "stop-container-app", "start-container-app"]'), github.event.inputs.action)
        run: |
          ACTION="${{ github.event.inputs.action }}"
          OPERATION=$(echo "$ACTION" | grep -q "stop" && echo "stop" || echo "start")
          
          echo "üì¶ ${OPERATION^}ping Container App..."
          
          # Find container app
          APP_NAME=$(az containerapp list --resource-group "$RESOURCE_GROUP" \
            --query "[?contains(name, 'tc-cloudgames-dev-api-app')].name" --output tsv 2>/dev/null)
          
          if [ -z "$APP_NAME" ]; then
            echo "‚ÑπÔ∏è No container app found - skipping container operation"
            exit 0
          fi
          
          # Check provisioning state
          PROV_STATE=$(az containerapp show --name "$APP_NAME" --resource-group "$RESOURCE_GROUP" \
            --query "properties.provisioningState" --output tsv 2>/dev/null)
          
          if [ "$PROV_STATE" != "Succeeded" ]; then
            echo "‚ö†Ô∏è Container app in state '$PROV_STATE' - cannot modify"
            exit 0
          fi
          
          # Get current replicas
          MIN_REPLICAS=$(az containerapp show --name "$APP_NAME" --resource-group "$RESOURCE_GROUP" \
            --query "properties.template.scale.minReplicas" --output tsv 2>/dev/null)
          
          echo "üìä App: $APP_NAME | Min Replicas: $MIN_REPLICAS"
          
          # Perform operation
          if [[ "$OPERATION" == "stop" && "$MIN_REPLICAS" != "0" ]]; then
            az containerapp update --name "$APP_NAME" --resource-group "$RESOURCE_GROUP" --min-replicas 0 --max-replicas 10 2>/dev/null
            echo "‚úÖ Container app stopped (min replicas = 0)"
          elif [[ "$OPERATION" == "start" && ("$MIN_REPLICAS" == "0" || "$MIN_REPLICAS" == "null") ]]; then
            az containerapp update --name "$APP_NAME" --resource-group "$RESOURCE_GROUP" --min-replicas 1 --max-replicas 10 2>/dev/null
            echo "‚úÖ Container app started (min replicas = 1)"
          else
            echo "‚ÑπÔ∏è Container app already in desired state"
          fi

      - name: üìä Resource Status Summary
        if: always()
        run: |
          echo "üìä Current Resource Status:"
          echo "========================="
          
          # Database status
          SERVER_NAME=$(az postgres flexible-server list --resource-group "$RESOURCE_GROUP" \
            --query "[?contains(name, 'tc-cloudgames-dev-db')].name" --output tsv 2>/dev/null)
          if [ -n "$SERVER_NAME" ]; then
            DB_STATUS=$(az postgres flexible-server show --name "$SERVER_NAME" --resource-group "$RESOURCE_GROUP" \
              --query "state" --output tsv 2>/dev/null)
            echo "üóÑÔ∏è Database: $SERVER_NAME ($DB_STATUS)"
          fi
          
          # Container app status
          APP_NAME=$(az containerapp list --resource-group "$RESOURCE_GROUP" \
            --query "[?contains(name, 'tc-cloudgames-dev-api-app')].name" --output tsv 2>/dev/null)
          if [ -n "$APP_NAME" ]; then
            MIN_REPLICAS=$(az containerapp show --name "$APP_NAME" --resource-group "$RESOURCE_GROUP" \
              --query "properties.template.scale.minReplicas" --output tsv 2>/dev/null)
            STATUS=$([ "$MIN_REPLICAS" == "0" ] && echo "Stopped" || echo "Running")
            echo "üì¶ Container App: $APP_NAME ($STATUS, min=$MIN_REPLICAS)"
          fi

  # Job 2: Terraform Storage Operations (Destroy/Recreate)
  terraform-storage:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: ${{ github.event.inputs.environment }}
    if: contains(fromJSON('["destroy-redis", "recreate-redis", "destroy-acr", "recreate-acr", "destroy-storage-resources", "recreate-storage-resources"]'), github.event.inputs.action)
    steps:
      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ‚ö†Ô∏è Validate Destructive Action
        if: github.event.inputs.confirm_destructive != 'true'
        run: |
          echo "‚ùå Destructive action requires confirmation!"
          echo "Please check 'Confirm destructive actions' checkbox to proceed."
          exit 1

      - name: üîß Execute Terraform Operations
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
        run: |
          ACTION="${{ github.event.inputs.action }}"
          echo "üîß Executing: $ACTION"
          
          # Get Terraform workspace ID (reusable function)
          get_workspace_id() {
            curl -s -H "Authorization: Bearer $TF_API_TOKEN" -H "Content-Type: application/vnd.api+json" \
              "https://app.terraform.io/api/v2/organizations/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ env.TF_WORKSPACE }}" | jq -r '.data.id'
          }
          
          # Execute Terraform run (reusable function)
          execute_terraform_run() {
            local message="$1"
            local is_destroy="$2"
            local target_addrs="$3"
            
            local payload="{\"data\":{\"type\":\"runs\",\"attributes\":{\"message\":\"$message\""
            [ "$is_destroy" == "true" ] && payload="$payload,\"is-destroy\":true"
            [ -n "$target_addrs" ] && payload="$payload,\"target-addrs\":[$target_addrs]"
            payload="$payload},\"relationships\":{\"workspace\":{\"data\":{\"type\":\"workspaces\",\"id\":\"$WORKSPACE_ID\"}}}}}"
            
            curl -s -X POST -H "Authorization: Bearer $TF_API_TOKEN" -H "Content-Type: application/vnd.api+json" \
              -d "$payload" "https://app.terraform.io/api/v2/runs" | jq -r '.data.id'
          }
          
          # Wait for run completion (reusable function)
          wait_for_run() {
            local run_id="$1"
            local max_attempts="${2:-40}"
            
            for i in $(seq 1 $max_attempts); do
              local status=$(curl -s -H "Authorization: Bearer $TF_API_TOKEN" \
                "https://app.terraform.io/api/v2/runs/$run_id" | jq -r '.data.attributes.status')
              
              echo "Status ($i/$max_attempts): $status"
              
              case "$status" in
                "applied"|"planned_and_finished") echo "‚úÖ Operation completed"; return 0 ;;
                "planned") echo "‚ö†Ô∏è Manual approval required"; return 0 ;;
                "errored"|"canceled") echo "‚ùå Operation failed: $status"; return 1 ;;
              esac
              
              sleep 15
            done
            echo "‚ö†Ô∏è Operation timeout"
            return 1
          }
          
          # Get workspace ID
          WORKSPACE_ID=$(get_workspace_id)
          [ "$WORKSPACE_ID" == "null" ] && { echo "‚ùå Failed to get workspace ID"; exit 1; }
          echo "‚úÖ Workspace ID: $WORKSPACE_ID"
          
          # Execute operations based on action
          case "$ACTION" in
            "destroy-redis"|"destroy-storage-resources")
              # Check if Redis exists
              REDIS_EXISTS=$(az redis list --resource-group "$RESOURCE_GROUP" \
                --query "[?contains(name, 'tc-cloudgames-dev-redis')].name" --output tsv 2>/dev/null || echo "")
              
              if [ -n "$REDIS_EXISTS" ]; then
                echo "üóëÔ∏è Destroying Redis cache: $REDIS_EXISTS"
                RUN_ID=$(execute_terraform_run "Destroy Redis - ${{ github.actor }}" "true" "\"azurerm_redis_cache.redis_cache\"")
                [ "$RUN_ID" != "null" ] && wait_for_run "$RUN_ID" || echo "‚ùå Failed to create Redis destroy run"
              else
                echo "‚ÑπÔ∏è Redis cache not found - skipping"
              fi
              
              # For combined operations, also handle ACR
              if [ "$ACTION" == "destroy-storage-resources" ]; then
                ACR_EXISTS=$(az acr list --resource-group "$RESOURCE_GROUP" \
                  --query "[?contains(name, 'tccloudgamesdevacr')].name" --output tsv 2>/dev/null || echo "")
                
                if [ -n "$ACR_EXISTS" ]; then
                  echo "üóëÔ∏è Destroying Container Registry: $ACR_EXISTS"
                  RUN_ID=$(execute_terraform_run "Destroy ACR - ${{ github.actor }}" "true" "\"azurerm_container_registry.acr\"")
                  [ "$RUN_ID" != "null" ] && wait_for_run "$RUN_ID" || echo "‚ùå Failed to create ACR destroy run"
                else
                  echo "‚ÑπÔ∏è Container Registry not found - skipping"
                fi
              fi
              ;;
              
            "destroy-acr")
              # Check if ACR exists
              ACR_EXISTS=$(az acr list --resource-group "$RESOURCE_GROUP" \
                --query "[?contains(name, 'tccloudgamesdevacr')].name" --output tsv 2>/dev/null || echo "")
              
              if [ -n "$ACR_EXISTS" ]; then
                echo "üóëÔ∏è Destroying Container Registry: $ACR_EXISTS"
                RUN_ID=$(execute_terraform_run "Destroy ACR - ${{ github.actor }}" "true" "\"azurerm_container_registry.acr\"")
                [ "$RUN_ID" != "null" ] && wait_for_run "$RUN_ID" || echo "‚ùå Failed to create ACR destroy run"
              else
                echo "‚ÑπÔ∏è Container Registry not found - skipping"
              fi
              ;;
              
            "recreate-"*)
              # For recreate operations, first destroy then apply
              RESOURCE_TYPE=$(echo "$ACTION" | sed 's/recreate-//')
              
              case "$RESOURCE_TYPE" in
                "redis"|"storage-resources")
                  echo "üîÑ Step 1: Destroying Redis for recreation..."
                  RUN_ID=$(execute_terraform_run "Recreate Redis destroy - ${{ github.actor }}" "true" "\"azurerm_redis_cache.redis_cache\"")
                  [ "$RUN_ID" != "null" ] && wait_for_run "$RUN_ID" 40
                  ;;
              esac
              
              case "$RESOURCE_TYPE" in
                "acr"|"storage-resources")
                  echo "üîÑ Step 2: Destroying ACR for recreation..."
                  RUN_ID=$(execute_terraform_run "Recreate ACR destroy - ${{ github.actor }}" "true" "\"azurerm_container_registry.acr\"")
                  [ "$RUN_ID" != "null" ] && wait_for_run "$RUN_ID" 40
                  ;;
              esac
              
              # Wait then recreate
              echo "üîÑ Step 3: Recreating resources via full apply..."
              sleep 30
              RUN_ID=$(execute_terraform_run "Recreate resources - ${{ github.actor }}" "false" "")
              [ "$RUN_ID" != "null" ] && wait_for_run "$RUN_ID" 60
              ;;
          esac
          
          echo "üîó Monitor: https://app.terraform.io/app/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ env.TF_WORKSPACE }}"

      - name: üìä Operation Summary
        if: always()
        run: |
          ACTION="${{ github.event.inputs.action }}"
          echo "üìä Terraform Operation Summary"
          echo "=============================="
          echo "Action: $ACTION"
          echo "Triggered by: ${{ github.actor }}"
          echo "Timestamp: $(date -u)"
          
          case "$ACTION" in
            *"redis"*) echo "üí∞ Redis operations save ~$15-25/month" ;;
            *"acr"*) echo "üí∞ ACR operations save ~$5-50/month" ;;
            *"storage"*) echo "üí∞ Combined operations save ~$20-75/month" ;;
          esac

  # Job 3: Summary and Next Steps
  summary:
    runs-on: ubuntu-latest
    needs: [azure-resources, terraform-storage]
    if: always()
    steps:
      - name: üìã Action Summary
        run: |
          ACTION="${{ github.event.inputs.action }}"
          
          echo "## üèóÔ∏è IaC Management Completed" >> $GITHUB_STEP_SUMMARY
          echo "| **Action** | $ACTION |" >> $GITHUB_STEP_SUMMARY
          echo "| **Triggered by** | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Status** | ‚úÖ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Action-specific guidance
          case "$ACTION" in
            "stop-all"|*"stop"*)
              echo "### üí° Next Steps" >> $GITHUB_STEP_SUMMARY
              echo "- Monitor cost savings in Azure Cost Management" >> $GITHUB_STEP_SUMMARY
              echo "- Use corresponding 'start' actions to resume services" >> $GITHUB_STEP_SUMMARY
              ;;
            "start-all"|*"start"*)
              echo "### üí° Next Steps" >> $GITHUB_STEP_SUMMARY
              echo "- Verify application functionality and health endpoints" >> $GITHUB_STEP_SUMMARY
              ;;
            *"destroy"*)
              echo "### üí° Next Steps" >> $GITHUB_STEP_SUMMARY
              echo "- Verify applications handle missing resources gracefully" >> $GITHUB_STEP_SUMMARY
              echo "- Consider 'recreate' actions to restore functionality" >> $GITHUB_STEP_SUMMARY
              ;;
            *"recreate"*)
              echo "### üí° Next Steps" >> $GITHUB_STEP_SUMMARY
              echo "- Update application connection strings if needed" >> $GITHUB_STEP_SUMMARY
              echo "- Rebuild and push container images if ACR was recreated" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Cost Optimization Tips" >> $GITHUB_STEP_SUMMARY
          echo "- **Daily**: stop-all (evening) ‚Üí start-all (morning) = ~$30-80/month savings" >> $GITHUB_STEP_SUMMARY
          echo "- **Weekly**: destroy-storage-resources (Friday) ‚Üí recreate (Monday) = ~$20-75/month savings" >> $GITHUB_STEP_SUMMARY
          echo "- **Combined approach**: ~$50-155/month total savings" >> $GITHUB_STEP_SUMMARY
