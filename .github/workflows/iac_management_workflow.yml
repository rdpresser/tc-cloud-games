name: üèóÔ∏è IaC Management | Stop/Start Resources

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Infrastructure Action'
        required: true
        type: choice
        options:
          - stop-all
          - start-all
          - stop-database
          - start-database
          - stop-container-app
          - start-container-app
          - destroy-redis
          - recreate-redis
        default: 'stop-all'
      confirm_destructive:
        description: 'Confirm destructive actions (destroy-redis, recreate-redis)'
        required: false
        type: boolean
        default: false

env:
  # Infrastructure configuration
  RESOURCE_GROUP: 'tc-cloudgames-dev-rg'
  CONTAINER_APP_NAME: 'tc-cloudgames-dev-api-app'
  POSTGRES_SERVER_NAME: 'tc-cloudgames-dev-db'
  REDIS_CACHE_NAME: 'tc-cloudgames-dev-redis'
  
  # Terraform Cloud configuration
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
  TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
  
  # Azure credentials
  CREDENTIALS: ${{ secrets.MAIN_AZURE_CREDENTIALS }}

jobs:
  # Job 1: Stop/Start Azure Resources via CLI
  manage-azure-resources:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: |
      contains(fromJSON('["stop-all", "start-all", "stop-database", "start-database", "stop-container-app", "start-container-app"]'), github.event.inputs.action)
    steps:
      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ env.CREDENTIALS }}

      - name: üõë Stop Database Server
        if: contains(fromJSON('["stop-all", "stop-database"]'), github.event.inputs.action)
        run: |
          echo "üõë Stopping PostgreSQL Flexible Server..."
          
          # Get the actual server name (it includes a random suffix)
          SERVER_NAME=$(az postgres flexible-server list \
            --resource-group "$RESOURCE_GROUP" \
            --query "[?contains(name, 'tc-cloudgames-dev-db')].name" \
            --output tsv)
          
          if [ -n "$SERVER_NAME" ]; then
            echo "Found server: $SERVER_NAME"
            
            # Check current status
            CURRENT_STATUS=$(az postgres flexible-server show \
              --name "$SERVER_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --query "state" \
              --output tsv)
            
            echo "Current status: $CURRENT_STATUS"
            
            if [ "$CURRENT_STATUS" == "Ready" ]; then
              az postgres flexible-server stop \
                --name "$SERVER_NAME" \
                --resource-group "$RESOURCE_GROUP"
              echo "‚úÖ Database server stopped successfully"
            elif [ "$CURRENT_STATUS" == "Stopped" ]; then
              echo "‚ÑπÔ∏è Database server is already stopped"
            else
              echo "‚ö†Ô∏è Database server is in state: $CURRENT_STATUS - cannot stop"
            fi
          else
            echo "‚ùå Database server not found"
            exit 1
          fi

      - name: üöÄ Start Database Server
        if: contains(fromJSON('["start-all", "start-database"]'), github.event.inputs.action)
        run: |
          echo "üöÄ Starting PostgreSQL Flexible Server..."
          
          # Get the actual server name (it includes a random suffix)
          SERVER_NAME=$(az postgres flexible-server list \
            --resource-group "$RESOURCE_GROUP" \
            --query "[?contains(name, 'tc-cloudgames-dev-db')].name" \
            --output tsv)
          
          if [ -n "$SERVER_NAME" ]; then
            echo "Found server: $SERVER_NAME"
            
            # Check current status
            CURRENT_STATUS=$(az postgres flexible-server show \
              --name "$SERVER_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --query "state" \
              --output tsv)
            
            echo "Current status: $CURRENT_STATUS"
            
            if [ "$CURRENT_STATUS" == "Stopped" ]; then
              az postgres flexible-server start \
                --name "$SERVER_NAME" \
                --resource-group "$RESOURCE_GROUP"
              echo "‚úÖ Database server started successfully"
            elif [ "$CURRENT_STATUS" == "Ready" ]; then
              echo "‚ÑπÔ∏è Database server is already running"
            else
              echo "‚ö†Ô∏è Database server is in state: $CURRENT_STATUS - cannot start"
            fi
          else
            echo "‚ùå Database server not found"
            exit 1
          fi

      - name: üõë Stop Container App
        if: contains(fromJSON('["stop-all", "stop-container-app"]'), github.event.inputs.action)
        run: |
          echo "üõë Stopping Container App by setting min replicas to 0..."
          
          # Get the actual container app name (it includes a random suffix if any)
          APP_NAME=$(az containerapp list \
            --resource-group "$RESOURCE_GROUP" \
            --query "[?contains(name, 'tc-cloudgames-dev-api-app')].name" \
            --output tsv)
          
          if [ -n "$APP_NAME" ]; then
            echo "Found container app: $APP_NAME"
            
            # Get current replica configuration
            CURRENT_MIN=$(az containerapp show \
              --name "$APP_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --query "properties.template.scale.minReplicas" \
              --output tsv)
            
            CURRENT_MAX=$(az containerapp show \
              --name "$APP_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --query "properties.template.scale.maxReplicas" \
              --output tsv)
            
            echo "Current configuration: min=$CURRENT_MIN, max=$CURRENT_MAX"
            
            if [ "$CURRENT_MIN" != "0" ]; then
              # Only update min replicas to 0, keep max at 10 for quick restart
              az containerapp update \
                --name "$APP_NAME" \
                --resource-group "$RESOURCE_GROUP" \
                --min-replicas 0 \
                --max-replicas 10
              echo "‚úÖ Container app stopped (min replicas set to 0, max remains 10)"
            else
              echo "‚ÑπÔ∏è Container app is already stopped (min replicas = 0)"
            fi
          else
            echo "‚ùå Container app not found"
            exit 1
          fi

      - name: üöÄ Start Container App
        if: contains(fromJSON('["start-all", "start-container-app"]'), github.event.inputs.action)
        run: |
          echo "üöÄ Starting Container App by setting min replicas to 1..."
          
          # Get the actual container app name
          APP_NAME=$(az containerapp list \
            --resource-group "$RESOURCE_GROUP" \
            --query "[?contains(name, 'tc-cloudgames-dev-api-app')].name" \
            --output tsv)
          
          if [ -n "$APP_NAME" ]; then
            echo "Found container app: $APP_NAME"
            
            # Get current replica configuration
            CURRENT_MIN=$(az containerapp show \
              --name "$APP_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --query "properties.template.scale.minReplicas" \
              --output tsv)
            
            CURRENT_MAX=$(az containerapp show \
              --name "$APP_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --query "properties.template.scale.maxReplicas" \
              --output tsv)
            
            echo "Current configuration: min=$CURRENT_MIN, max=$CURRENT_MAX"
            
            if [ "$CURRENT_MIN" == "0" ] || [ "$CURRENT_MIN" == "null" ]; then
              # Set min replicas to 1 to ensure the app starts, keep max at 10 for scaling
              az containerapp update \
                --name "$APP_NAME" \
                --resource-group "$RESOURCE_GROUP" \
                --min-replicas 1 \
                --max-replicas 10
              echo "‚úÖ Container app started (min replicas set to 1, max remains 10)"
            else
              echo "‚ÑπÔ∏è Container app is already running (min replicas: $CURRENT_MIN)"
            fi
          else
            echo "‚ùå Container app not found"
            exit 1
          fi

      - name: üìä Resource Status Summary
        if: always()
        run: |
          echo "üìä Current Resource Status:"
          echo "========================="
          
          # Database status
          echo "üóÑÔ∏è Database Status:"
          SERVER_NAME=$(az postgres flexible-server list \
            --resource-group "$RESOURCE_GROUP" \
            --query "[?contains(name, 'tc-cloudgames-dev-db')].name" \
            --output tsv)
          
          if [ -n "$SERVER_NAME" ]; then
            DB_STATUS=$(az postgres flexible-server show \
              --name "$SERVER_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --query "state" \
              --output tsv)
            echo "  Server: $SERVER_NAME"
            echo "  Status: $DB_STATUS"
          fi
          
          # Container app status
          echo ""
          echo "üì¶ Container App Status:"
          APP_NAME=$(az containerapp list \
            --resource-group "$RESOURCE_GROUP" \
            --query "[?contains(name, 'tc-cloudgames-dev-api-app')].name" \
            --output tsv)
          
          if [ -n "$APP_NAME" ]; then
            MIN_REPLICAS=$(az containerapp show \
              --name "$APP_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --query "properties.template.scale.minReplicas" \
              --output tsv)
            
            MAX_REPLICAS=$(az containerapp show \
              --name "$APP_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --query "properties.template.scale.maxReplicas" \
              --output tsv)
            
            echo "  App: $APP_NAME"
            echo "  Scale Configuration: min=$MIN_REPLICAS, max=$MAX_REPLICAS"
            
            if [ "$MIN_REPLICAS" == "0" ]; then
              echo "  Status: üõë Stopped (min replicas = 0)"
            else
              echo "  Status: üöÄ Active (min replicas = $MIN_REPLICAS)"
            fi
          fi

  # Job 2: Manage Redis Cache via Terraform Cloud
  manage-redis-terraform:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: |
      contains(fromJSON('["destroy-redis", "recreate-redis"]'), github.event.inputs.action)
    steps:
      - name: ‚ö†Ô∏è Validate Destructive Action Confirmation
        if: github.event.inputs.confirm_destructive != 'true'
        run: |
          echo "‚ùå Destructive action requires confirmation!"
          echo "Please check 'Confirm destructive actions' checkbox to proceed."
          echo ""
          echo "‚ö†Ô∏è  WARNING: This action will:"
          if [ "${{ github.event.inputs.action }}" == "destroy-redis" ]; then
            echo "  ‚Ä¢ Permanently destroy the Redis cache"
            echo "  ‚Ä¢ All cached data will be lost"
            echo "  ‚Ä¢ Applications will lose cache functionality"
          elif [ "${{ github.event.inputs.action }}" == "recreate-redis" ]; then
            echo "  ‚Ä¢ Destroy and recreate the Redis cache"
            echo "  ‚Ä¢ All cached data will be lost"
            echo "  ‚Ä¢ Cache will be empty after recreation"
          fi
          exit 1

      - name: üóëÔ∏è Destroy Redis Cache via Terraform Cloud
        if: github.event.inputs.action == 'destroy-redis'
        run: |
          echo "üóëÔ∏è Destroying Redis cache via Terraform Cloud..."
          
          # Get workspace ID
          echo "Getting workspace information..."
          WORKSPACE_ID=$(curl -s \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/organizations/$TF_CLOUD_ORGANIZATION/workspaces/$TF_WORKSPACE" \
            | jq -r '.data.id')
          
          if [ "$WORKSPACE_ID" == "null" ] || [ -z "$WORKSPACE_ID" ]; then
            echo "‚ùå Failed to get workspace ID"
            echo "Please verify TF_CLOUD_ORGANIZATION and TF_WORKSPACE secrets"
            exit 1
          fi
          
          echo "Workspace ID: $WORKSPACE_ID"
          
          # Create a targeted destroy plan for Redis
          echo "Creating targeted destroy run..."
          DESTROY_RUN_ID=$(curl -s \
            -X POST \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Content-Type: application/vnd.api+json" \
            -d "{
              \"data\": {
                \"type\": \"runs\",
                \"attributes\": {
                  \"message\": \"Destroy Redis cache - triggered from GitHub Actions by ${{ github.actor }}\",
                  \"is-destroy\": true,
                  \"target-addrs\": [\"azurerm_redis_cache.redis_cache\"]
                },
                \"relationships\": {
                  \"workspace\": {
                    \"data\": {
                      \"type\": \"workspaces\",
                      \"id\": \"$WORKSPACE_ID\"
                    }
                  }
                }
              }
            }" \
            "https://app.terraform.io/api/v2/runs" \
            | jq -r '.data.id')
          
          if [ "$DESTROY_RUN_ID" == "null" ] || [ -z "$DESTROY_RUN_ID" ]; then
            echo "‚ùå Failed to create destroy run"
            exit 1
          fi
          
          echo "‚úÖ Terraform destroy run created: $DESTROY_RUN_ID"
          echo "üîó Monitor progress: https://app.terraform.io/app/$TF_CLOUD_ORGANIZATION/workspaces/$TF_WORKSPACE/runs/$DESTROY_RUN_ID"
          
          # Wait for plan to complete
          echo "‚è≥ Waiting for destroy plan to complete..."
          for i in {1..30}; do
            RUN_STATUS=$(curl -s \
              -H "Authorization: Bearer $TF_API_TOKEN" \
              "https://app.terraform.io/api/v2/runs/$DESTROY_RUN_ID" \
              | jq -r '.data.attributes.status')
            
            echo "Plan status ($i/30): $RUN_STATUS"
            
            if [ "$RUN_STATUS" == "planned" ]; then
              echo "‚úÖ Destroy plan completed successfully"
              echo "‚ö†Ô∏è  Manual approval may be required in Terraform Cloud"
              break
            elif [ "$RUN_STATUS" == "applied" ]; then
              echo "‚úÖ Destroy completed successfully"
              break
            elif [ "$RUN_STATUS" == "errored" ] || [ "$RUN_STATUS" == "canceled" ]; then
              echo "‚ùå Destroy plan failed with status: $RUN_STATUS"
              exit 1
            fi
            
            sleep 10
          done
          
          echo "üí∞ Estimated monthly savings: ~$15-25 (Redis Standard C1)"

      - name: üîÑ Recreate Redis Cache via Terraform Cloud
        if: github.event.inputs.action == 'recreate-redis'
        run: |
          echo "üîÑ Recreating Redis cache via Terraform Cloud..."
          
          # Get workspace ID
          echo "Getting workspace information..."
          WORKSPACE_ID=$(curl -s \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/organizations/$TF_CLOUD_ORGANIZATION/workspaces/$TF_WORKSPACE" \
            | jq -r '.data.id')
          
          if [ "$WORKSPACE_ID" == "null" ] || [ -z "$WORKSPACE_ID" ]; then
            echo "‚ùå Failed to get workspace ID"
            exit 1
          fi
          
          # Step 1: Destroy Redis
          echo "Step 1: Destroying existing Redis cache..."
          DESTROY_RUN_ID=$(curl -s \
            -X POST \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Content-Type: application/vnd.api+json" \
            -d "{
              \"data\": {
                \"type\": \"runs\",
                \"attributes\": {
                  \"message\": \"Destroy Redis for recreation - triggered from GitHub Actions by ${{ github.actor }}\",
                  \"is-destroy\": true,
                  \"target-addrs\": [\"azurerm_redis_cache.redis_cache\"]
                },
                \"relationships\": {
                  \"workspace\": {
                    \"data\": {
                      \"type\": \"workspaces\",
                      \"id\": \"$WORKSPACE_ID\"
                    }
                  }
                }
              }
            }" \
            "https://app.terraform.io/api/v2/runs" \
            | jq -r '.data.id')
          
          echo "Destroy run created: $DESTROY_RUN_ID"
          
          # Wait for destroy to complete
          echo "‚è≥ Waiting for destroy to complete..."
          for i in {1..60}; do
            RUN_STATUS=$(curl -s \
              -H "Authorization: Bearer $TF_API_TOKEN" \
              "https://app.terraform.io/api/v2/runs/$DESTROY_RUN_ID" \
              | jq -r '.data.attributes.status')
            
            echo "Destroy status ($i/60): $RUN_STATUS"
            
            if [ "$RUN_STATUS" == "applied" ]; then
              echo "‚úÖ Destroy completed successfully"
              break
            elif [ "$RUN_STATUS" == "errored" ] || [ "$RUN_STATUS" == "canceled" ]; then
              echo "‚ùå Destroy failed with status: $RUN_STATUS"
              exit 1
            fi
            
            sleep 15
          done
          
          # Step 2: Create Redis
          echo "Step 2: Creating new Redis cache..."
          sleep 30  # Wait a bit before recreating
          
          CREATE_RUN_ID=$(curl -s \
            -X POST \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Content-Type: application/vnd.api+json" \
            -d "{
              \"data\": {
                \"type\": \"runs\",
                \"attributes\": {
                  \"message\": \"Recreate Redis cache - triggered from GitHub Actions by ${{ github.actor }}\",
                  \"target-addrs\": [\"azurerm_redis_cache.redis_cache\"]
                },
                \"relationships\": {
                  \"workspace\": {
                    \"data\": {
                      \"type\": \"workspaces\",
                      \"id\": \"$WORKSPACE_ID\"
                    }
                  }
                }
              }
            }" \
            "https://app.terraform.io/api/v2/runs" \
            | jq -r '.data.id')
          
          echo "‚úÖ Redis recreation run created: $CREATE_RUN_ID"
          echo "üîó Monitor progress: https://app.terraform.io/app/$TF_CLOUD_ORGANIZATION/workspaces/$TF_WORKSPACE/runs/$CREATE_RUN_ID"

      - name: üìä Terraform Operation Summary
        if: always()
        run: |
          echo "üìä Terraform Operation Summary:"
          echo "==============================="
          echo "Action performed: ${{ github.event.inputs.action }}"
          echo "Workspace: $TF_WORKSPACE"
          echo "Organization: $TF_CLOUD_ORGANIZATION"
          echo "Triggered by: ${{ github.actor }}"
          echo "Timestamp: $(date -u)"
          echo ""
          echo "üîó View workspace: https://app.terraform.io/app/$TF_CLOUD_ORGANIZATION/workspaces/$TF_WORKSPACE"

  # Job 3: Cost Estimation and Summary
  cost-summary:
    runs-on: ubuntu-latest
    needs: [manage-azure-resources, manage-redis-terraform]
    if: always()
    steps:
      - name: üí∞ Cost Impact Summary
        run: |
          echo "üí∞ Cost Impact Summary"
          echo "====================="
          
          ACTION="${{ github.event.inputs.action }}"
          
          case "$ACTION" in
            "stop-all")
              echo "üõë Resources Stopped:"
              echo "  ‚Ä¢ PostgreSQL Flexible Server: ~$20-50/month savings"
              echo "  ‚Ä¢ Container App: ~$10-30/month savings" 
              echo "  ‚Ä¢ Total estimated savings: ~$30-80/month"
              echo ""
              echo "üí° Benefits:"
              echo "  ‚Ä¢ Immediate cost reduction"
              echo "  ‚Ä¢ Resources can be restarted quickly"
              echo "  ‚Ä¢ Data is preserved"
              ;;
            "start-all")
              echo "üöÄ Resources Started:"
              echo "  ‚Ä¢ PostgreSQL Flexible Server: ~$20-50/month cost resumed"
              echo "  ‚Ä¢ Container App: ~$10-30/month cost resumed"
              echo "  ‚Ä¢ Total estimated cost resumed: ~$30-80/month"
              echo ""
              echo "‚úÖ Services:"
              echo "  ‚Ä¢ Database ready for connections"
              echo "  ‚Ä¢ API ready to handle requests"
              echo "  ‚Ä¢ Full application functionality restored"
              ;;
            "stop-database")
              echo "üõë Database Server Stopped:"
              echo "  ‚Ä¢ PostgreSQL Flexible Server: ~$20-50/month savings"
              echo "  ‚Ä¢ ‚ö†Ô∏è  Application will lose database connectivity"
              ;;
            "start-database")
              echo "üöÄ Database Server Started:"
              echo "  ‚Ä¢ PostgreSQL Flexible Server: ~$20-50/month cost resumed"
              echo "  ‚Ä¢ ‚úÖ Database ready for connections"
              ;;
            "stop-container-app")
              echo "üõë Container App Stopped:"
              echo "  ‚Ä¢ Container App: ~$10-30/month savings"
              echo "  ‚Ä¢ ‚ö†Ô∏è  API endpoints will be unavailable"
              ;;
            "start-container-app")
              echo "üöÄ Container App Started:"
              echo "  ‚Ä¢ Container App: ~$10-30/month cost resumed"
              echo "  ‚Ä¢ ‚úÖ API ready to handle requests"
              ;;
            "destroy-redis")
              echo "üóëÔ∏è Redis Cache Destroyed:"
              echo "  ‚Ä¢ Redis Standard C1: ~$15-25/month savings"
              echo "  ‚Ä¢ ‚ö†Ô∏è  Data permanently lost - ensure backups if needed"
              echo "  ‚Ä¢ ‚ö†Ô∏è  Applications will lose cache functionality"
              ;;
            "recreate-redis")
              echo "üîÑ Redis Cache Recreated:"
              echo "  ‚Ä¢ Redis Standard C1: ~$15-25/month cost resumed"
              echo "  ‚Ä¢ üóëÔ∏è Previous data lost - cache will be empty"
              echo "  ‚Ä¢ ‚úÖ Fresh cache instance available"
              ;;
            *)
              echo "Individual resource action performed: $ACTION"
              ;;
          esac
          
          echo ""
          echo "üìä Resource Management Tips:"
          echo "  ‚Ä¢ Use 'stop-all' during non-business hours for maximum savings"
          echo "  ‚Ä¢ Database stop/start may take 2-5 minutes"
          echo "  ‚Ä¢ Container apps scale instantly"
          echo "  ‚Ä¢ Redis recreation takes 10-15 minutes"
          echo "  ‚Ä¢ Always confirm destructive actions"
          echo ""
          echo "‚è∞ Recommended Schedule:"
          echo "  ‚Ä¢ Weekdays 6 PM: stop-all"
          echo "  ‚Ä¢ Weekdays 8 AM: start-all" 
          echo "  ‚Ä¢ Weekends: keep stopped"

      - name: üìß Action Completion Summary
        run: |
          echo "## üèóÔ∏è IaC Management Action Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Detail | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Action** | \`${{ github.event.inputs.action }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Triggered by** | \`${{ github.actor }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Timestamp** | \`$(date -u)\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Confirmation** | \`${{ github.event.inputs.confirm_destructive }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.action }}" == *"redis"* ]]; then
            echo "### üîó Terraform Cloud" >> $GITHUB_STEP_SUMMARY
            echo "Monitor progress in your [Terraform Cloud workspace](https://app.terraform.io/app/$TF_CLOUD_ORGANIZATION/workspaces/$TF_WORKSPACE)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### üìã Next Steps" >> $GITHUB_STEP_SUMMARY
          case "${{ github.event.inputs.action }}" in
            "stop-all"|"stop-database"|"stop-container-app")
              echo "- Monitor cost savings in Azure Cost Management" >> $GITHUB_STEP_SUMMARY
              echo "- Use corresponding 'start' action to resume services" >> $GITHUB_STEP_SUMMARY
              ;;
            "start-all"|"start-database"|"start-container-app")
              echo "- Verify application functionality" >> $GITHUB_STEP_SUMMARY
              echo "- Check health endpoints" >> $GITHUB_STEP_SUMMARY
              ;;
            "destroy-redis")
              echo "- Verify applications handle missing cache gracefully" >> $GITHUB_STEP_SUMMARY
              echo "- Monitor application performance without cache" >> $GITHUB_STEP_SUMMARY
              ;;
            "recreate-redis")
              echo "- Update application connection strings if needed" >> $GITHUB_STEP_SUMMARY
              echo "- Warm up cache with frequently accessed data" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **IaC Management operation completed successfully!**" >> $GITHUB_STEP_SUMMARY
