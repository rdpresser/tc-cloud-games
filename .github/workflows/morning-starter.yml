name: 🌅 Morning Starter

on:
  # Manual trigger option for testing with customizable parameters
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to prepare'
        required: true
        default: 'dev-rodrigo'
        type: choice
        options:
          - dev-rodrigo
          - dev-ricardo
      recreate_wait_minutes:
        description: 'Minutes to wait after triggering recreate-storage (default: 25)'
        required: false
        type: number
        default: 25
      start_wait_minutes:
        description: 'Minutes to wait after triggering start-all (default: 5)'
        required: false
        type: number
        default: 5
      skip_recreate:
        description: 'Skip recreating storage resources (if they still exist)'
        required: false
        type: boolean
        default: false

jobs:
  morning-preparation:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    environment: ${{ github.event.inputs.environment }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4

      - name: 🌅 Morning Business Preparation Started
        run: |
          echo "🌅 Starting Morning Business Preparation at $(TZ='America/Sao_Paulo' date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "💼 Preparing infrastructure for business day"
          echo "🔄 Configuration:"
          echo "  - Environment: ${{ github.event.inputs.environment }}"
          echo "  - Recreate wait time: ${{ github.event.inputs.recreate_wait_minutes || '25' }} minutes"
          echo "  - Start wait time: ${{ github.event.inputs.start_wait_minutes || '5' }} minutes"
          echo "  - Skip recreate: ${{ github.event.inputs.skip_recreate || 'false' }}"
          echo "🔄 This will trigger actions sequentially:"
          if [ "${{ github.event.inputs.skip_recreate || 'false' }}" != "true" ]; then
            echo "  1. Recreate storage resources (Redis + Container Registry)"
          else
            echo "  1. Skip recreating storage resources (manual override)"
          fi
          echo "  2. Start all compute resources (Database + Container App)"
          echo ""

      - name: 🔄 Trigger Recreate Storage Resources
        if: ${{ github.event.inputs.skip_recreate != 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const recreateWaitMinutes = parseInt('${{ github.event.inputs.recreate_wait_minutes }}') || 25;
            const recreateWaitMs = recreateWaitMinutes * 60 * 1000;
            
            try {
              // First verify the target workflow exists
              const workflows = await github.rest.actions.listRepoWorkflows({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              const targetWorkflow = workflows.data.workflows.find(w => 
                w.name === '🏗️ IaC Management | Stop/Start Resources' || 
                w.path.includes('iac_management_workflow.yml')
              );
              
              if (!targetWorkflow) {
                throw new Error('Target IaC Management workflow not found');
              }
              
              console.log(`🔍 Found target workflow: ${targetWorkflow.name}`);
              console.log(`📍 Using branch: ${context.ref}`);
              
              const result = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'iac_management_workflow.yml',
                ref: context.ref,
                inputs: {
                  environment: '${{ github.event.inputs.environment }}',
                  action: 'recreate-storage-resources',
                  confirm_destructive: 'true'
                }
              });
              console.log('🔄 Recreate storage resources workflow dispatched successfully');
              
              // Dynamic wait based on input
              console.log(`⏳ Waiting ${recreateWaitMinutes} minutes for storage resources to be recreated...`);
              await new Promise(resolve => setTimeout(resolve, recreateWaitMs));
              console.log('✅ Storage recreation wait period completed');
            } catch (error) {
              console.error('❌ Failed to dispatch recreate storage resources workflow:', error.message);
              console.error('🔍 Error details:', error.status, error.response?.data?.message);
              throw error;
            }

      - name: ⏭️ Skip Recreate Storage Resources
        if: ${{ github.event.inputs.skip_recreate == 'true' }}
        run: |
          echo "⏭️ Skipping storage resource recreation (manual override)"
          echo "ℹ️ Assuming Redis Cache and Container Registry still exist"
          echo "⚠️ If storage was destroyed, this may cause application startup issues"

      - name: 🚀 Trigger Start All Resources
        uses: actions/github-script@v7
        with:
          script: |
            const startWaitMinutes = parseInt('${{ github.event.inputs.start_wait_minutes }}') || 5;
            const startWaitMs = startWaitMinutes * 60 * 1000;
            
            try {
              const result = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'iac_management_workflow.yml',
                ref: context.ref,
                inputs: {
                  environment: '${{ github.event.inputs.environment }}',
                  action: 'start-all',
                  confirm_destructive: 'false'
                }
              });
              console.log('🚀 Start all resources workflow dispatched successfully');
              console.log(`📍 Using branch: ${context.ref}`);
              
              // Dynamic wait based on input
              console.log(`⏳ Waiting ${startWaitMinutes} minutes for resources to start...`);
              await new Promise(resolve => setTimeout(resolve, startWaitMs));
              console.log('✅ Both preparation actions have been triggered');
            } catch (error) {
              console.error('❌ Failed to dispatch start all resources workflow:', error.message);
              console.error('🔍 Error details:', error.status, error.response?.data?.message);
              throw error;
            }

      - name: 📊 Morning Preparation Summary
        run: |
          BRT_TIME=$(TZ='America/Sao_Paulo' date '+%Y-%m-%d %H:%M:%S %Z')
          SKIP_RECREATE="${{ github.event.inputs.skip_recreate || 'false' }}"
          RECREATE_WAIT="${{ github.event.inputs.recreate_wait_minutes || '25' }}"
          START_WAIT="${{ github.event.inputs.start_wait_minutes || '5' }}"
          
          echo "## 🌅 Morning Business Preparation Triggered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Action | Wait Time |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Schedule** | 8:00 AM BRT (Monday-Friday) | - |" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | ${{ github.event.inputs.environment }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| **Triggered At** | $BRT_TIME | - |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$SKIP_RECREATE" != "true" ]; then
            echo "| **Redis Cache** | 🔄 Recreate Triggered | ${RECREATE_WAIT} min |" >> $GITHUB_STEP_SUMMARY
            echo "| **Container Registry** | 🔄 Recreate Triggered | ${RECREATE_WAIT} min |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **Redis Cache** | ⏭️ Skip Recreate | - |" >> $GITHUB_STEP_SUMMARY
            echo "| **Container Registry** | ⏭️ Skip Recreate | - |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "| **Database** | 🚀 Start Triggered | ${START_WAIT} min |" >> $GITHUB_STEP_SUMMARY
          echo "| **Container App** | 🚀 Start Triggered | ${START_WAIT} min |" >> $GITHUB_STEP_SUMMARY
          echo "| **Business Status** | 💼 Ready for Work Day | - |" >> $GITHUB_STEP_SUMMARY
          echo "| **Next Optimization** | 10:00 PM BRT | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Business day preparation workflows triggered successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 What Happens Next:" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor the [IaC Management workflow runs](https://github.com/${{ github.repository }}/actions/workflows/iac_management_workflow.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- Verify application functionality and health endpoints" >> $GITHUB_STEP_SUMMARY
          
          if [ "$SKIP_RECREATE" != "true" ]; then
            echo "- Rebuild and push container images to new ACR if needed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- Resources will auto-optimize again at 10:00 PM BRT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$SKIP_RECREATE" != "true" ]; then
            echo "### ⚠️ Post-Startup Tasks:" >> $GITHUB_STEP_SUMMARY
            echo "- Container images were lost during optimization - rebuild if needed" >> $GITHUB_STEP_SUMMARY
            echo "- Redis cache is empty - will warm up automatically with use" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ℹ️ Storage Resources:" >> $GITHUB_STEP_SUMMARY
            echo "- Redis cache preserved - existing data available" >> $GITHUB_STEP_SUMMARY
            echo "- Container registry preserved - existing images available" >> $GITHUB_STEP_SUMMARY
          fi
