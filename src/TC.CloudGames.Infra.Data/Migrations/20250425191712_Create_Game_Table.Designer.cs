// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TC.CloudGames.Infra.Data;

#nullable disable

namespace TC.CloudGames.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250425191712_Create_Game_Table")]
    partial class Create_Game_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TC.CloudGames.Domain.Game.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AgeRating")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("age_rating");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("GameStatus")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("game_status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("OfficialLink")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("official_link");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("numeric")
                        .HasColumnName("rating");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.HasKey("Id")
                        .HasName("pk_games");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("TC.CloudGames.Domain.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TC.CloudGames.Domain.Game.Game", b =>
                {
                    b.OwnsOne("TC.CloudGames.Domain.Game.DeveloperInfo", "DeveloperInfo", b1 =>
                        {
                            b1.Property<Guid>("GameId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Developer")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("developer_info");

                            b1.Property<string>("Publisher")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("developer_info_publisher");

                            b1.HasKey("GameId");

                            b1.ToTable("games");

                            b1.WithOwner()
                                .HasForeignKey("GameId")
                                .HasConstraintName("fk_games_games_id");
                        });

                    b.OwnsOne("TC.CloudGames.Domain.Game.DiskSize", "DiskSize", b1 =>
                        {
                            b1.Property<Guid>("GameId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("SizeInGb")
                                .HasColumnType("numeric")
                                .HasColumnName("disk_size_in_gb");

                            b1.HasKey("GameId");

                            b1.ToTable("games");

                            b1.WithOwner()
                                .HasForeignKey("GameId")
                                .HasConstraintName("fk_games_games_id");
                        });

                    b.OwnsOne("TC.CloudGames.Domain.Game.GameDetails", "GameDetails", b1 =>
                        {
                            b1.Property<Guid>("GameId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("AvailableLanguages")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("game_details_available_languages");

                            b1.Property<string>("DistributionFormat")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("game_details_distribution_format");

                            b1.Property<string>("GameMode")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("game_details_game_mode");

                            b1.Property<string>("Genre")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("game_details_genre");

                            b1.Property<string>("Platform")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("game_details_platform");

                            b1.Property<bool>("SupportsDlcs")
                                .HasColumnType("boolean")
                                .HasColumnName("game_details_supports_dlcs");

                            b1.Property<string>("Tags")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("game_details_tags");

                            b1.HasKey("GameId");

                            b1.ToTable("games");

                            b1.WithOwner()
                                .HasForeignKey("GameId")
                                .HasConstraintName("fk_games_games_id");
                        });

                    b.OwnsOne("TC.CloudGames.Domain.Game.Playtime", "Playtime", b1 =>
                        {
                            b1.Property<Guid>("GameId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int?>("Hours")
                                .HasColumnType("integer")
                                .HasColumnName("playtime_hours");

                            b1.Property<int?>("PlayerCount")
                                .HasColumnType("integer")
                                .HasColumnName("playtime_player_count");

                            b1.HasKey("GameId");

                            b1.ToTable("games");

                            b1.WithOwner()
                                .HasForeignKey("GameId")
                                .HasConstraintName("fk_games_games_id");
                        });

                    b.OwnsOne("TC.CloudGames.Domain.Game.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("GameId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("price_amount");

                            b1.HasKey("GameId");

                            b1.ToTable("games");

                            b1.WithOwner()
                                .HasForeignKey("GameId")
                                .HasConstraintName("fk_games_games_id");
                        });

                    b.OwnsOne("TC.CloudGames.Domain.Game.SystemRequirements", "SystemRequirements", b1 =>
                        {
                            b1.Property<Guid>("GameId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Minimum")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("system_requirements_minimum");

                            b1.Property<string>("Recommended")
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("system_requirements_recommended");

                            b1.HasKey("GameId");

                            b1.ToTable("games");

                            b1.WithOwner()
                                .HasForeignKey("GameId")
                                .HasConstraintName("fk_games_games_id");
                        });

                    b.Navigation("DeveloperInfo")
                        .IsRequired();

                    b.Navigation("DiskSize")
                        .IsRequired();

                    b.Navigation("GameDetails")
                        .IsRequired();

                    b.Navigation("Playtime");

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("SystemRequirements")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
