#rodar apenas se ainda não estiver instalado
dotnet tool install --global dotnet-sonarscanner

dotnet sonarscanner begin /k:"tc-cloudgames-local" /d:sonar.host.url="http://localhost:9000"  /d:sonar.token="sqp_c3c48b658840cb4ba8ae948682f254550baf4845"
dotnet build TC.CloudGames.sln
dotnet test TC.CloudGames.sln /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/coverage.xml
dotnet sonarscanner end /d:sonar.token="sqp_c3c48b658840cb4ba8ae948682f254550baf4845"

dotnet sonarscanner begin /k:"tc-cloudgames-local" /d:sonar.host.url="http://localhost:9000" /d:sonar.login="sqp_c3c48b658840cb4ba8ae948682f254550baf4845"
dotnet build TC.CloudGames.sln
dotnet test TC.CloudGames.sln /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/coverage.xml
dotnet sonarscanner end /d:sonar.login="sqp_c3c48b658840cb4ba8ae948682f254550baf4845"


dotnet msbuild TC.CloudGames.sln /t:RunCodeCoverageAndSonar

dotnet msbuild .\TC.CloudGames.sln /t:Test;RunCodeCoverageAndSonar

dotnet msbuild TC.CloudGames.sln /t:Test;RunCodeCoverageAndSonar


<Project>
  <Target Name="RunCodeCoverageAndSonar" AfterTargets="Test">
    <Exec Command="dotnet sonarscanner begin /k:'tc-cloudgames-local' /d:sonar.host.url='http://localhost:9000'  /d:sonar.token='sqp_c3c48b658840cb4ba8ae948682f254550baf4845'" />
    <Exec Command="dotnet build TC.CloudGames.sln" />
    <Exec Command="dotnet test TC.CloudGames.sln /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/coverage.xml" />
    <Exec Command="dotnet sonarscanner end /d:sonar.token='sqp_c3c48b658840cb4ba8ae948682f254550baf4845'" />
  </Target>
</Project>

<Project>
  <Target Name="RunCodeCoverageAndSonar" AfterTargets="Test">
    <Exec Command="dotnet sonarscanner begin /k:'tc-cloudgames-local' /d:sonar.host.url='http://localhost:9000'  /d:sonar.login='sqp_c3c48b658840cb4ba8ae948682f254550baf4845'" />
    <Exec Command="dotnet build TC.CloudGames.sln" />
    <Exec Command="dotnet test TC.CloudGames.sln /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/coverage.xml" />
    <Exec Command="dotnet sonarscanner end /d:sonar.login='sqp_c3c48b658840cb4ba8ae948682f254550baf4845'" />
  </Target>
</Project>



<Target Name="RunCodeCoverageAndSonar" AfterTargets="Test">
    <Exec Command="dotnet sonarscanner begin /k:'tc-cloudgames-local' /d:sonar.host.url='http://localhost:9000'  /d:sonar.login='sqp_c3c48b658840cb4ba8ae948682f254550baf4845'" />
    <Exec Command="dotnet build TC.CloudGames.sln" />
    <Exec Command="dotnet test TC.CloudGames.sln /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/coverage.xml" />
    <Exec Command="dotnet sonarscanner end /d:sonar.login='sqp_c3c48b658840cb4ba8ae948682f254550baf4845'" />
  </Target>


dotnet test "./TC.CloudGames.Api.csproj" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=/app/TestResults/coverage.xml



dotnet tool install --global dotnet-sonarscanner
dotnet sonarscanner begin /k:"tc-cloudgames-local" /d:sonar.host.url="http://localhost:9000"  /d:sonar.token="sqp_c3c48b658840cb4ba8ae948682f254550baf4845"
dotnet build
dotnet sonarscanner end /d:sonar.token="sqp_c3c48b658840cb4ba8ae948682f254550baf4845"


dotnet tool install -g dotnet-reportgenerator-globaltool


# Start SonarScanner analysis
dotnet sonarscanner begin /k:"tc-cloudgames-local" /d:sonar.host.url="http://localhost:9000" /d:sonar.login="sqp_c3c48b658840cb4ba8ae948682f254550baf4845"

# Build application
dotnet build ".\src\TC.CloudGames.Api\TC.CloudGames.Api.csproj"

# Run individual test projects & collect code coverage
dotnet test .\test\TC.CloudGames.Api.Tests\TC.CloudGames.Api.Tests.csproj  /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=.\TestResults\Api.Tests_coverage.xml

dotnet test .\test\TC.CloudGames.Application.Tests\TC.CloudGames.Application.Tests.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=.\TestResults\Application.Tests_coverage.xml

dotnet test .\test\TC.CloudGames.Domain.Tests\TC.CloudGames.Domain.Tests.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=.\TestResults\Domain.Tests_coverage.xml

dotnet test .\test\TC.CloudGames.Architecture.Tests\TC.CloudGames.Architecture.Tests.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=.\TestResults\Architecture.Tests_coverage.xml

dotnet test .\test\TC.CloudGames.Integration.Tests\TC.CloudGames.Integration.Tests.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=.\TestResults\Integration.Tests_coverage.xml

# End SonarScanner analysis
dotnet sonarscanner end /d:sonar.login="sqp_c3c48b658840cb4ba8ae948682f254550baf4845"



-------------------------------------
dotnet sonarscanner begin /k:"tc-cloudgames-local" /d:sonar.host.url="http://localhost:9000" /d:sonar.login="sqp_c3c48b658840cb4ba8ae948682f254550baf4845" /d:sonar.cs.cobertura.reportsPaths="TestResults/CoverageReport/Cobertura.xml"

dotnet build ".\src\TC.CloudGames.Api\TC.CloudGames.Api.csproj"

dotnet test .\test\TC.CloudGames.Api.Tests\TC.CloudGames.Api.Tests.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=.\TestResults\Api.Tests_coverage.xml
dotnet test .\test\TC.CloudGames.Application.Tests\TC.CloudGames.Application.Tests.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=.\TestResults\Application.Tests_coverage.xml
dotnet test .\test\TC.CloudGames.Domain.Tests\TC.CloudGames.Domain.Tests.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=.\TestResults\Domain.Tests_coverage.xml
dotnet test .\test\TC.CloudGames.Architecture.Tests\TC.CloudGames.Architecture.Tests.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=.\TestResults\Architecture.Tests_coverage.xml
dotnet test .\test\TC.CloudGames.Integration.Tests\TC.CloudGames.Integration.Tests.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=.\TestResults\Integration.Tests_coverage.xml

reportgenerator -reports:".\TestResults\*_coverage.xml" -targetdir:".\TestResults\CoverageReport" -reporttypes:Cobertura

dotnet sonarscanner end /d:sonar.login="sqp_c3c48b658840cb4ba8ae948682f254550baf4845"


+++++++++++++++++++++++++++++++++++++++++++++++
dotnet sonarscanner begin `
  /k:"tc-cloudgames-local" `
  /d:sonar.host.url="http://localhost:9000" `
  /d:sonar.login="sqp_c3c48b658840cb4ba8ae948682f254550baf4845"

dotnet build ".\src\TC.CloudGames.Api\TC.CloudGames.Api.csproj"

dotnet test .\test\TC.CloudGames.Api.Tests\TC.CloudGames.Api.Tests.csproj --collect:"XPlat Code Coverage"
dotnet test .\test\TC.CloudGames.Application.Tests\TC.CloudGames.Application.Tests.csproj --collect:"XPlat Code Coverage"
dotnet test .\test\TC.CloudGames.Domain.Tests\TC.CloudGames.Domain.Tests.csproj --collect:"XPlat Code Coverage"
dotnet test .\test\TC.CloudGames.Architecture.Tests\TC.CloudGames.Architecture.Tests.csproj --collect:"XPlat Code Coverage"
dotnet test .\test\TC.CloudGames.Integration.Tests\TC.CloudGames.Integration.Tests.csproj --collect:"XPlat Code Coverage"

reportgenerator `
  -reports:".\test\**\TestResults\**\coverage.cobertura.xml" `
  -targetdir:".\TestResults\CoverageReport" `
  -reporttypes:Cobertura

dotnet sonarscanner end `
  /d:sonar.login="sqp_c3c48b658840cb4ba8ae948682f254550baf4845"



  -++++++++++++++++++++++++++++++

dotnet sonarscanner begin `
  /k:"tc-cloudgames-local" `
  /d:sonar.host.url="http://localhost:9000" `
  /d:sonar.login="sqp_c3c48b658840cb4ba8ae948682f254550baf4845"

dotnet build ".\src\TC.CloudGames.Api\TC.CloudGames.Api.csproj"

dotnet test .\test\TC.CloudGames.Api.Tests\TC.CloudGames.Api.Tests.csproj --collect:"XPlat Code Coverage" --results-directory ".\TestResults"
dotnet test .\test\TC.CloudGames.Application.Tests\TC.CloudGames.Application.Tests.csproj --collect:"XPlat Code Coverage" --results-directory ".\TestResults"
dotnet test .\test\TC.CloudGames.Domain.Tests\TC.CloudGames.Domain.Tests.csproj --collect:"XPlat Code Coverage" --results-directory ".\TestResults"
dotnet test .\test\TC.CloudGames.Architecture.Tests\TC.CloudGames.Architecture.Tests.csproj --collect:"XPlat Code Coverage" --results-directory ".\TestResults"
dotnet test .\test\TC.CloudGames.Integration.Tests\TC.CloudGames.Integration.Tests.csproj --collect:"XPlat Code Coverage" --results-directory ".\TestResults"

reportgenerator `
  -reports:".\TestResults\**\coverage.cobertura.xml" `
  -targetdir:".\TestResults\CoverageReport" `
  -reporttypes:Cobertura

dotnet sonarscanner end `
  /d:sonar.login="sqp_c3c48b658840cb4ba8ae948682f254550baf4845"
